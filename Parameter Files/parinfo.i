/*******************************************************************************
*
*  Filename:      parinfo.i
*
*  Copyright(c) Zebra Technologies, 2003-2016
*
*  Description:     The translation table for all parameters.
*                   KEEP PARAMETER NUMBERS IN NUMERIC ORDER IN THE TABLE TO ALLOW
*                   FOR MORE EFFICIENT SEARCH IF NEEDED.
*
*  Author:          Nina Bruk
*
*  Creation Date:   8/20/03
*
*  Derived From:    new
*
*******************************************************************************/
// NOTES:
//          1. In order to be changeable, a parameter must appear in this table.
//          2. When communicating with MIMIC, certain of these parameters will default to a value that MIMIC
//             wants. If a corresponding parameter barcode, or, set defaults is scanned, these parameters will not be allowed
//             to change (since that would mess up MIMIC). These parameters are also not reported in a PARAM_SEND message to
//             MIMIC. These parameters are denoted by a ENG_OWNED in the owner field.
//          3. When not communicating with MIMIC, the parameters in 2 above behave normally.
//          4. The column 'code_type' is 'TRUE if the parameter is a code_type/symbology. The 'enable/disable all symbology'
//             command scans this column.
//
/*  par_num                       offset                                              type                   min_val          max_val          owner                   old_sect       old_offset   old_type       code_type  */
/*  -------                       -----                                               -----                  -------          -------          -----                   --------       ----------   -----          ---------  */
{NUM_CODE39,                      0x00,                                               BIT_0,                      0,               1,          DEC_OWNED,              0x00,          0x00,        BIT_0,         TRUE },    // c39_en
{NUM_UPCA,                        0x00,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x00,          0x00,        BIT_1,         TRUE },    // upca_en
{NUM_UPCE,                        0x00,                                               BIT_2,                      0,               1,          DEC_OWNED,              0x00,          0x00,        BIT_2,         TRUE },    // upce_en
{NUM_EAN13,                       0x00,                                               BIT_3,                      0,               1,          DEC_OWNED,              0x00,          0x00,        BIT_3,         TRUE },    // ean13_en
{NUM_EAN8,                        0x00,                                               BIT_4,                      0,               1,          DEC_OWNED,              0x00,          0x00,        BIT_4,         TRUE },    // ean8_en
{NUM_D25,                         0x00,                                               BIT_5,                      0,               1,          DEC_OWNED,              0x00,          0x00,        BIT_5,         TRUE },    // d25_en
{NUM_I25,                         0x00,                                               BIT_6,                      0,               1,          DEC_OWNED,              0x00,          0x00,        BIT_6,         TRUE },    // i25_en
{NUM_CODABAR,                     0x00,                                               BIT_7,                      0,               1,          DEC_OWNED,              0x00,          0x00,        BIT_7,         TRUE },    // cbar_en
{NUM_CODE128,                     0x1E,                                               BIT_7,                      0,               1,          DEC_OWNED,              0x00,          0x01,        BIT_0,         TRUE },    // c128_en
{NUM_CODE93,                      0x01,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x00,          0x01,        BIT_1,         TRUE },    // c93_en
{NUM_MSI,                         0x01,                                               BIT_3,                      0,               1,          DEC_OWNED,              0x00,          0x01,        BIT_4,         TRUE },    // cmsi_en
{NUM_UPCE1,                       0x01,                                               BIT_4,                      0,               1,          DEC_OWNED,              0x00,          0x01,        BIT_5,         TRUE },    // upce1_en
{NUM_TRIOPTIC,                    0x01,                                               BIT_7,                      0,               1,          DEC_OWNED,              0x00,          0x02,        BIT_2,         TRUE },    // tri_c39
{NUM_EAN128,                      0x07,                                               BIT_4,                      0,               1,          DEC_OWNED,              0x04,          0x03,        BIT_3,         TRUE },    // ean128_enabled
{NUM_PDF,                         0x09,                                               BIT_3,                      0,               1,          DEC_OWNED,              0x00,          0x01,        BIT_6,         TRUE },    // pdf_en
{NUM_SUPPS,                       offsetof(BYTE_PARAMS,supps_autod),                  BYTE_PARAM,                 0,              12,          DEC_OWNED,              0x01,          0x0e,        CHANGE_BYTE,   FALSE},    // supps_autod
{NUM_C39_FULL_ASCII,              0x04,                                               BIT_0,                      0,               1,          DEC_OWNED,              0x02,          0x01,        BIT_1,         FALSE},    // code39_full_ascii
{NUM_C39_LEN1,                    offsetof(BYTE_PARAMS,c39_l1),                       BYTE_PARAM,                 0,              99,          DEC_OWNED,              0x01,          0x00,        CHANGE_BYTE,   FALSE},    // c39_l1
{NUM_C39_LEN2,                    offsetof(BYTE_PARAMS,c39_l2),                       BYTE_PARAM,                 0,              99,          DEC_OWNED,              0x01,          0x01,        CHANGE_BYTE,   FALSE},    // c39_l2
{NUM_D25_LEN1,                    offsetof(BYTE_PARAMS,d25_l1),                       BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x06,        CHANGE_BYTE,   FALSE},    // d25_l1
{NUM_D25_LEN2,                    offsetof(BYTE_PARAMS,d25_l2),                       BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x07,        CHANGE_BYTE,   FALSE},    // d25_l2
{NUM_I25_LEN1,                    offsetof(BYTE_PARAMS,i25_l1),                       BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x08,        CHANGE_BYTE,   FALSE},    // i25_l1
{NUM_I25_LEN2,                    offsetof(BYTE_PARAMS,i25_l2),                       BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x09,        CHANGE_BYTE,   FALSE},    // i25_l2
{NUM_CBR_LEN1,                    offsetof(BYTE_PARAMS,codabar_l1),                   BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x02,        CHANGE_BYTE,   FALSE},    // codabar_l1
{NUM_CBR_LEN2,                    offsetof(BYTE_PARAMS,codabar_l2),                   BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x03,        CHANGE_BYTE,   FALSE},    // codabar_l2
{NUM_C93_LEN1,                    offsetof(BYTE_PARAMS,c93_l1),                       BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x0a,        CHANGE_BYTE,   FALSE},    // c93_l1
{NUM_C93_LEN2,                    offsetof(BYTE_PARAMS,c93_l2),                       BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x0b,        CHANGE_BYTE,   FALSE},    // c93_l2
{NUM_MSI_LEN1,                    offsetof(BYTE_PARAMS,msi_l1),                       BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x0f,        CHANGE_BYTE,   FALSE},    // msi_l1
{NUM_MSI_LEN2,                    offsetof(BYTE_PARAMS,msi_l2),                       BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x10,        CHANGE_BYTE,   FALSE},    // msi_l2
{NUM_UPCA_PREAM,                  offsetof(BYTE_PARAMS,upca_preamble),                BYTE_PARAM,                 0,               2,          DEC_OWNED,              0x03,          0x01,        CHANGE_BYTE,   FALSE},    // upca_preamble
{NUM_UPCE_PREAM,                  offsetof(BYTE_PARAMS,upce_preamble),                BYTE_PARAM,                 0,               2,          DEC_OWNED,              0x03,          0x00,        CHANGE_BYTE,   FALSE},    // upce_preamble
{NUM_UPCE1_PREAM,                 offsetof(BYTE_PARAMS,upce1_preamble),               BYTE_PARAM,                 0,               2,          DEC_OWNED,              0x03,          0x02,        CHANGE_BYTE,   FALSE},    // upce1_preamble
{NUM_UPCE_TO_A,                   0x02,                                               BIT_7,                      0,               1,          DEC_OWNED,              0x02,          0x00,        BIT_0,         FALSE},    // conv_upce2a_b
{NUM_UPCE1_TO_A,                  0x04,                                               BIT_4,                      0,               1,          DEC_OWNED,              0x02,          0x01,        BIT_5,         FALSE},    // conv_upce1_2a_b
{NUM_EAN8_TO_13,                  0x03,                                               BIT_0,                      0,               1,          DEC_OWNED,              0x02,          0x00,        BIT_1,         FALSE},    // conv_ean8to13_b
{NUM_UPCA_CHK,                    0x03,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x02,          0x00,        BIT_2,         FALSE},    // upc_a_chk_b
{NUM_UPCE_CHK,                    0x03,                                               BIT_2,                      0,               1,          DEC_OWNED,              0x02,          0x00,        BIT_3,         FALSE},    // upc_e_chk_b
{NUM_UPCE1_CHK,                   0x04,                                               BIT_5,                      0,               1,          DEC_OWNED,              0x02,          0x01,        BIT_6,         FALSE},    // upc_e1_chk_b
{NUM_XMIT_C39_CHK,                0x05,                                               BIT_2,                      0,               1,          DEC_OWNED,              0x02,          0x02,        BIT_4,         FALSE},    // code39_xmit_chkdgt
{NUM_XMIT_I25_CHK,                0x04,                                               BIT_7,                      0,               1,          DEC_OWNED,              0x02,          0x02,        BIT_1,         FALSE},    // xmit_i25_chkdgt
{NUM_XMIT_CODE_ID,                offsetof(BYTE_PARAMS,xmit_code_id),                 BYTE_PARAM,                 0,               2,          DEC_OWNED,              0x05,          0x17,        CHANGE_BYTE,   FALSE},    // xmit_code_id
{NUM_XMIT_MSI_CHK,                0x04,                                               BIT_2,                      0,               1,          DEC_OWNED,              0x02,          0x01,        BIT_3,         FALSE},    // report_msi_chk
{NUM_C39_CHK_EN,                  0x03,                                               BIT_3,                      0,               1,          DEC_OWNED,              0x02,          0x00,        BIT_4,         FALSE},    // code39_chk_b
{NUM_I25_CHK_TYPE,                offsetof(BYTE_PARAMS,check_i25_chkdgt),             BYTE_PARAM,                 0,               2,          DEC_OWNED,              0x05,          0x1e,        CHANGE_BYTE,   FALSE},    // check_i25_chkdgt
{NUM_MSI_CHK_1_2,                 offsetof(BYTE_PARAMS,msi_chk_dgt),                  BYTE_PARAM,                 0,               2,          DEC_OWNED,               N_A,           N_A,          N_A,         FALSE},   // msi_chk_dgt
{NUM_MSI_CHK_SCHEME,              0x05,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x02,          0x02,        BIT_3,         FALSE},    // msi_chkdgt_scheme
{NUM_CLSI,                        0x03,                                               BIT_4,                      0,               1,          DEC_OWNED,              0x02,          0x00,        BIT_5,         FALSE},    // clsi_editing
{NUM_NOTIS,                       0x03,                                               BIT_5,                      0,               1,          DEC_OWNED,              0x02,          0x00,        BIT_6,         FALSE},    // notis_editing
{NUM_DEC_BEEP,                    0x06,                                               BIT_0,                      0,               1,          DEC_OWNED,              0x04,          0x00,        BIT_2,         FALSE},    // decode_beep_b
{NUM_C128_STITCH,                 0x06,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x04,          0x00,        BIT_4,         FALSE},    // c128_stitch_enabled
{NUM_HALFBLK_STITCH,              0x22,                                               BIT_0,                      0,               1,          DEC_OWNED,              0x04,          0x04,        BIT_2,         FALSE},    // halfblk_stitch
{NUM_HB_STITCH_LEV,               offsetof(BYTE_PARAMS,hb_stitch_lev),                BYTE_PARAM,                 0,               3,          DEC_OWNED,              0x04,          0x1C,        CHANGE_BYTE,   FALSE},    // hb_stitch_lev
{NUM_C39_REDUN,                   0x06,                                               BIT_4,                      0,               1,          DEC_OWNED,              0x04,          0x02,        BIT_2,         FALSE},    // c39_red_enabled
{NUM_C128_REDUN,                  0x06,                                               BIT_5,                      0,               1,          DEC_OWNED,              0x04,          0x02,        BIT_3,         FALSE},    // c128_red_enabled
{NUM_MSI_REDUN,                   0x06,                                               BIT_6,                      0,               1,          DEC_OWNED,              0x04,          0x02,        BIT_4,         FALSE},    // cmsi_red_enabled
{NUM_CBR_REDUN,                   0x06,                                               BIT_7,                      0,               1,          DEC_OWNED,              0x04,          0x02,        BIT_5,         FALSE},    // cbar_red_enabled
{NUM_I25_REDUN,                   0x07,                                               BIT_0,                      0,               1,          DEC_OWNED,              0x04,          0x02,        BIT_6,         FALSE},    // ci25_red_enabled
{NUM_D25_REDUN,                   0x07,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x04,          0x02,        BIT_7,         FALSE},    // cd25_red_enabled
{NUM_C93_REDUN,                   0x07,                                               BIT_2,                      0,               1,          DEC_OWNED,              0x04,          0x03,        BIT_0,         FALSE},    // c93_red_enabled
{NUM_C39_STITCH,                  0x07,                                               BIT_6,                      0,               1,          DEC_OWNED,              0x04,          0x03,        BIT_5,         FALSE},    // c39_stitch_enabled
{NUM_TRI_REDUN,                   0x08,                                               BIT_2,                      0,               1,          DEC_OWNED,              0x04,          0x04,        BIT_6,         FALSE},    // tri39_red_enabled
{NUM_LINEAR_SUPPS,                0x08,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x04,          0x04,        BIT_4,         FALSE},    // linear_supp_enabled
{NUM_UPC_SEC_LEV,                 offsetof(BYTE_PARAMS,upcean_security_level),        BYTE_PARAM,                 0,               3,          DEC_OWNED,              0x05,          0x11,        CHANGE_BYTE,   FALSE},    // upcean_security_level
{NUM_LIN_SEC_LEV,                 offsetof(BYTE_PARAMS,linear_security_level),        BYTE_PARAM,                 1,               4,          DEC_OWNED,              0x05,          0x15,        CHANGE_BYTE,   FALSE},    // linear_security_level
{NUM_SUPP_REDUN,                  offsetof(BYTE_PARAMS,no_supp_max),                  BYTE_PARAM,                 2,              25,          DEC_OWNED,              0x05,          0x18,        CHANGE_BYTE,   FALSE},    // no_supp_max
{NUM_I25_TO_EAN13,                0x05,                                               BIT_0,                      0,               1,          DEC_OWNED,              0x02,          0x02,        BIT_0,         FALSE},    // itf14_to_ean13
{NUM_BOOKLAND,                    0x02,                                               BIT_0,                      0,               1,          DEC_OWNED,              0x00,          0x02,        BIT_3,          TRUE},    // book_ean
#if !defined(INCLUDE_MP7000)
{NUM_ISBT_128,                    0x02,                                               BIT_2,                      0,               1,          DEC_OWNED,              0x00,          0x03,        BIT_3,         TRUE },    // isbt128_en
#endif
{NUM_COUPON,                      0x02,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x00,          0x02,        BIT_4,         TRUE },    // coupon_en
{NUM_CODE32,                      0x05,                                               BIT_3,                      0,               1,          DEC_OWNED,              0x02,          0x03,        BIT_0,         FALSE},    // c39_to_c32_conv
{NUM_XMIT_NO_READ,                0x03,                                               BIT_7,                      0,               1,          DEC_OWNED,              0x02,          0x01,        BIT_0,         FALSE},    // xmit_no_decode_msg
{NUM_KEYCAT_1,                    offsetof(STRING_PARAMS,datf_keycat[0]),             STRING_PARAM,               1,               7,          HOST_OWNED,             0x0C,          0x00,        CHANGE_STRING, FALSE},    // datf_keycat[0] suffix1
{NUM_KEYCAT_2,                    offsetof(STRING_PARAMS,datf_keycat[1]),            STRING_PARAM,               1,               7,          HOST_OWNED,             0x0C,          0x01,        CHANGE_STRING, FALSE},    // datf_keycat[1] prefix1
{NUM_KEYCAT_3,                    offsetof(STRING_PARAMS,datf_keycat[2]),            STRING_PARAM,               1,               7,          HOST_OWNED,             0x0C,          0x02,        CHANGE_STRING, FALSE},    // datf_keycat[2] suffix2
{NUM_KEYCAT_4,                    offsetof(STRING_PARAMS,datf_keycat[3]),            STRING_PARAM,               1,               7,          HOST_OWNED,             0x0C,          0x03,        CHANGE_STRING, FALSE},    // datf_keycat[3] suffix1
{NUM_KEYCAT_5,                    offsetof(STRING_PARAMS,datf_keycat[4]),            STRING_PARAM,               1,               7,          HOST_OWNED,             0x0C,          0x04,        CHANGE_STRING, FALSE},    // datf_keycat[4] prefix1
{NUM_KEYCAT_6,                    offsetof(STRING_PARAMS,datf_keycat[5]),            STRING_PARAM,               1,               7,          HOST_OWNED,             0x0C,          0x05,        CHANGE_STRING, FALSE},    // datf_keycat[5] suffix2
{NUM_KEYVAL_1,                    offsetof(STRING_PARAMS,datf_value[0]),              STRING_PARAM,               0,             255,          HOST_OWNED,             0x0C,          0x06,        CHANGE_STRING, FALSE},    // datf_value[0]  suffix1
{NUM_KEYVAL_2,                    offsetof(STRING_PARAMS,datf_value[1]),             STRING_PARAM,               0,             255,          HOST_OWNED,             0x0C,          0x07,        CHANGE_STRING, FALSE},    // datf_value[1]  prefix1
{NUM_KEYVAL_3,                    offsetof(STRING_PARAMS,datf_value[2]),             STRING_PARAM,               0,             255,          HOST_OWNED,             0x0C,          0x08,        CHANGE_STRING, FALSE},    // datf_value[2]  suffix2
{NUM_KEYVAL_4,                    offsetof(STRING_PARAMS,datf_value[3]),             STRING_PARAM,               0,             255,          HOST_OWNED,             0x0C,          0x09,        CHANGE_STRING, FALSE},    // datf_value[3]  suffix1
{NUM_KEYVAL_5,                    offsetof(STRING_PARAMS,datf_value[4]),             STRING_PARAM,               0,             255,          HOST_OWNED,             0x0C,          0x0A,        CHANGE_STRING, FALSE},    // datf_value[4]  prefix1
{NUM_KEYVAL_6,                    offsetof(STRING_PARAMS,datf_value[5]),             STRING_PARAM,               0,             255,          HOST_OWNED,             0x0C,          0x0B,        CHANGE_STRING, FALSE},    // datf_value[5]  suffix2
{NUM_PAUSE_DUR,                   offsetof(BYTE_PARAMS,pause_duration),               BYTE_PARAM,                 0,             255,          HOST_OWNED,             0x0C,          0x0D,        CHANGE_BYTE,   FALSE},    // pause_duration
{NUM_EMUL_EAN128,                 0x0c,                                               BIT_1,                      0,               1,          DEC_OWNED,              OLD_SECTION_M, 0x01,        BIT_7,         FALSE},    // emul_ean128_en
#if !defined(INCLUDE_MP7000)
{NUM_OPERATING_MODE,              0x09,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x04,          0x04,        BIT_5,         FALSE},    // operating_mode
#endif
{NUM_SYNAPSE,                     offsetof(STRING_PARAMS,dat),                        STRING_PARAM,       N_A_BOUND,       N_A_BOUND,          HOST_OWNED,             's',           0x00,        CHANGE_STRING, FALSE},    // dat[SYNAPSE_SIZE]
{NUM_LASER_ON_PRIM,               offsetof(BYTE_PARAMS,laser_on_timeout_p),           BYTE_PARAM,                 5,              99,          DEC_OWNED,              0x05,          0x00,        CHANGE_BYTE,   FALSE},    // laser_on_timeout_p
{NUM_LASER_OFF_PRIM,              offsetof(BYTE_PARAMS,laser_off_timeout_p),          BYTE_PARAM,                 0,              99,          DEC_OWNED,              0x05,          0x01,        CHANGE_BYTE,   FALSE},    // laser_off_timeout_p
{NUM_BEEPER_VOLUME,               offsetof(BYTE_PARAMS,beeper_volume),                BYTE_PARAM,                 0,               4,          DEC_OWNED,              0x05,          0x08,        CHANGE_BYTE,   FALSE},    // beeper_volume
{NUM_HOST_LASER_OFF,              offsetof(BYTE_PARAMS,host_laser_off_time),          BYTE_PARAM,                 0,              99,          DEC_OWNED,              N_A,           N_A,         CHANGE_BYTE,   FALSE},    // host_laser_off_time
#if defined(ODYSSEY_TODO) // Extend to allow 3 new Industrial Design decode beeps
{NUM_BEEPER_FREQ,                 offsetof(BYTE_PARAMS,beeper_frequency),             BYTE_PARAM,                 0,               5,          DEC_OWNED,              0x05,          0x0e,        CHANGE_BYTE,   FALSE},    // beeper_frequency
#else
{NUM_BEEPER_FREQ,                 offsetof(BYTE_PARAMS,beeper_frequency),             BYTE_PARAM,                 0,               4,          DEC_OWNED,              0x05,          0x0e,        CHANGE_BYTE,   FALSE},    // beeper_frequency
#endif
#if !defined(INCLUDE_MP7000)
{NUM_LASER_SLEEP_DUR,             offsetof(BYTE_PARAMS,laser_sleep_duration),         BYTE_PARAM,         N_A_BOUND,       N_A_BOUND,          DEC_OWNED,              0x05,          0x10,        CHANGE_BYTE,   FALSE},    // laser_sleep_duration
#endif
{NUM_RS232_HOST,                  offsetof(BYTE_PARAMS,rs232_host),                   BYTE_PARAM,         N_A_BOUND,       N_A_BOUND,          DEC_OWNED,              N_A,           N_A,         N_A,   FALSE},    // rs232_host
{NUM_SUPP2,                       0x01,                                               BIT_5,                      0,               1,          DEC_OWNED,              0x00,          0x02,        BIT_0,         FALSE},    // suppl_2
{NUM_SUPP5,                       0x01,                                               BIT_6,                      0,               1,          DEC_OWNED,              0x00,          0x02,        BIT_1,         FALSE},    // suppl_5
{NUM_C128_LEN1,                   offsetof(BYTE_PARAMS,c128_l1),                      BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x04,        CHANGE_BYTE,   FALSE},    // c128_l1
{NUM_C128_LEN2,                   offsetof(BYTE_PARAMS,c128_l2),                      BYTE_PARAM,                 0,              55,          DEC_OWNED,              0x01,          0x05,        CHANGE_BYTE,   FALSE},    // c128_l2
#if !defined(INCLUDE_MP7000)
{NUM_ISBT_MAX_TRY,                offsetof(BYTE_PARAMS,isbt_max_try),                 BYTE_PARAM,                 2,              20,          DEC_OWNED,              0x01,          0x15,        CHANGE_BYTE,   FALSE},    // isbt_max_try
#endif
{NUM_UPDF,                        0x09,                                               BIT_4,                      0,               1,          DEC_OWNED,              0x00,          0x03,        BIT_4,         TRUE },    // updf_en
{NUM_C32_PREFIX,                  0x05,                                               BIT_4,                      0,               1,          DEC_OWNED,              0x02,          0x03,        BIT_2,         FALSE},    // c32_prefix
{NUM_DATA_FORMAT,                 offsetof(BYTE_PARAMS,data_format),                  BYTE_PARAM,                 0,               7,          ENG_OWNED | HOST_OWNED, 0x0C,          0x10,        CHANGE_BYTE,   FALSE},    // data_format // oem added this one and mimic uses it also
{NUM_PARAMETERS_ALLOWED,          0x0F,                                               BIT_1,                      0,               1,          DEC_OWNED,              0x04,          0x06,        BIT_0,         FALSE},    // parameters_allowed
{NUM_DECODE_EVENT,                0x0F,                                               BIT_5,                      0,               1,          ENG_OWNED | HOST_OWNED, 0x4f,          0x00,        BIT_0,         FALSE},    // decode_event //oem added events - mimic marked as decoder owned - ipos2 will support what the engine supported
{NUM_SYSTEM_EVENT,                0x0F,                                               BIT_7,                      0,               1,          ENG_OWNED | HOST_OWNED, 0x4f,          0x00,        BIT_1,         FALSE},    // system_event
{NUM_BOOTUP_EVENT,                0x0F,                                               BIT_4,                      0,               1,          ENG_OWNED | HOST_OWNED, 0x4f,          0x00,        BIT_2,         FALSE},    // bootup_event
{NUM_PARAM_EVENT,                 0x0F,                                               BIT_6,                      0,               1,          ENG_OWNED | HOST_OWNED, 0x4f,          0x00,        BIT_3,         FALSE},    // param_event
{NUM_SYSTEM_ERROR,                0x10,                                               BIT_0,                      0,               1,          ENG_OWNED | HOST_OWNED, 0x4f,          0x00,        BIT_4,         FALSE},    // system_error
{NUM_SCANNING_ERROR,              0x10,                                               BIT_1,                      0,               1,          ENG_OWNED | HOST_OWNED, 0x4f,          0x00,        BIT_5,         FALSE},    // scanning_error
{NUM_POWER_BEEP,                  0x17,                                               BIT_1,                      0,               1,          HOST_OWNED,             N_A,           N_A,         N_A,           FALSE},    // power_beep
{NUM_DATAMATRIX,                  0x09,                                               BIT_5,                      0,               1,          DEC_OWNED,              N_A,           N_A,         N_A,           TRUE },    // DataMatrix
{NUM_QRCODE,                      0x0a,                                               BIT_1,                      0,               1,          DEC_OWNED,              N_A,           N_A,         N_A,           TRUE },    // QRCode
{NUM_IMG_USE_JPEG_QUAL,           0x0b,                                               BIT_3,                      0,               1,          DEC_OWNED,              0x44,          0x00,        BIT_5,         FALSE},    // UseJpegQual
{NUM_IMG_CROP,                    0x0b,                                               BIT_2,                      0,               1,          DEC_OWNED,              0x44,          0x00,        BIT_4,         FALSE},    // CropImage
{NUM_IMG_SUBSAMPLE,               offsetof(BYTE_PARAMS,SubSample),                    BYTE_PARAM,                 0,               3,          DEC_OWNED,              0x45,          0x00,        CHANGE_BYTE,   FALSE},    // SubSample
{NUM_IMG_BPP,                     offsetof(BYTE_PARAMS,bpp),                          BYTE_PARAM,                 0,               2,          DEC_OWNED,              0x45,          0x01,        CHANGE_BYTE,   FALSE},    // bpp
{NUM_IMG_FILE_FORMAT,             offsetof(BYTE_PARAMS,FileFormat),                   BYTE_PARAM,                 1,               4,          DEC_OWNED,              0x45,          0x02,        CHANGE_BYTE,   FALSE},    // FileFormat
{NUM_IMG_JPEG_QUAL,               offsetof(BYTE_PARAMS,JPEGQuality),                  BYTE_PARAM,                 5,             100,          DEC_OWNED,              0x45,          0x03,        CHANGE_BYTE,   FALSE},    // JPEGQuality
{NUM_IMG_SIG_FMT,                 offsetof(BYTE_PARAMS,SigFormat),                    BYTE_PARAM,                 1,               4,          DEC_OWNED,              0x45,          0x13,        CHANGE_BYTE,   FALSE},    // SigFormat
{NUM_IMG_SIG_BPP,                 offsetof(BYTE_PARAMS,SigBpp),                       BYTE_PARAM,                 0,               2,          DEC_OWNED,              0x45,          0x14,        CHANGE_BYTE,   FALSE},    // SigBpp
{NUM_IMG_CROP_TOP,                offsetof(WORD_PARAMS,CropTop),                      WORD_PARAM,                 0,  (IMG_HEIGHT_SENSOR-1),   DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // CropTop
{NUM_IMG_CROP_LEFT,               offsetof(WORD_PARAMS,CropLeft),                     WORD_PARAM,                 0,   (IMG_WIDTH_SENSOR-1),   DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // CropLeft
{NUM_IMG_CROP_BOT,                offsetof(WORD_PARAMS,CropBot),                      WORD_PARAM,                 0,  (IMG_HEIGHT_SENSOR-1),   DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // CropBot
{NUM_IMG_CROP_RIGHT,              offsetof(WORD_PARAMS,CropRight),                    WORD_PARAM,                 0,   (IMG_WIDTH_SENSOR-1),   DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // CropRight
{NUM_IMG_SNAPTIMEOUT,             offsetof(BYTE_PARAMS,SnapTimeout),                  BYTE_PARAM,                 0,                9,         DEC_OWNED,              0x45,          0x0b,        CHANGE_BYTE,   FALSE},    // SnapTimeout
{NUM_IMG_VIDEOVF,                 0x0b,                                               BIT_4,                      0,                1,         DEC_OWNED,              0x44,          0x00,        BIT_6,         FALSE},    // VideoViewFinder
#ifndef INCLUDE_DS9808
{NUM_IMG_VIDEO_FRAME,             offsetof(BYTE_PARAMS,VideoFrameSize),               BYTE_PARAM,                 8,              200,         DEC_OWNED,              0x45,          0x0c,        CHANGE_BYTE,   FALSE},    // VideoFrameSize
#endif
{NUM_IMG_VF_FRAME,                offsetof(BYTE_PARAMS,VideoVFFrameSize),             BYTE_PARAM,              0x08,             0x78,         DEC_OWNED,              0x45,          0x0d,        CHANGE_BYTE,   FALSE},    // VideoVFFrameSize
{NUM_IMG_PORTRAIT,                0x17,                                               BIT_2,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // img_portrait_en
{NUM_RSS_14,                      0x02,                                               BIT_3,                      0,                1,         DEC_OWNED,              0x00,          0x03,        BIT_5,         TRUE },    // rss_14_en
{NUM_RSS_LIM,                     0x02,                                               BIT_4,                      0,                1,         DEC_OWNED,              0x00,          0x03,        BIT_6,         TRUE },    // rss_lim_en
{NUM_RSS_EXP,                     0x02,                                               BIT_5,                      0,                1,         DEC_OWNED,              0x00,          0x03,        BIT_7,         TRUE },    // rss_exp_en
{NUM_CCC_ENABLE,                  0x0e,                                               BIT_6,                      0,                1,         DEC_OWNED,              0x00,          0x04,        BIT_0,         TRUE },    // ccc_en
{NUM_CCAB_ENABLE,                 0x0b,                                               BIT_7,                      0,                1,         DEC_OWNED,              0x00,          0x04,        BIT_1,         TRUE },    // ccab_en
{NUM_UPC_COMPOSITE,               offsetof(BYTE_PARAMS,upc_composite),                BYTE_PARAM,                 0,                2,         DEC_OWNED,              0x01,          0x16,        CHANGE_BYTE,   FALSE},    // upc_composite
{NUM_SIGCAP_WIDTH,                offsetof(WORD_PARAMS,SigCapWidth),                  WORD_PARAM,                 1,   IMG_WIDTH_SENSOR,       DEC_OWNED,              0x46,          0x23,        CHANGE_WORD,   FALSE},    // SigCapWidth
{NUM_SIGCAP_HEIGHT,               offsetof(WORD_PARAMS,SigCapHeight),                 WORD_PARAM,                 1,  IMG_HEIGHT_SENSOR,       DEC_OWNED,              0x46,          0x24,        CHANGE_WORD,   FALSE},    // SigCapHeight
{NUM_TCIF,                        0x0f,                                               BIT_0,                      0,                1,         DEC_OWNED,              0x00,          0x04,        BIT_2,         TRUE },    // tcif_en
{NUM_MARGIN_RATIO,                offsetof(BYTE_PARAMS,marg_ratio),                   BYTE_PARAM,         N_A_BOUND,        N_A_BOUND,         DEC_OWNED,              0x05,          0x2b,        CHANGE_BYTE,   FALSE},    // marg_ratio
{NUM_MIA_HOSTNUM,                 offsetof(BYTE_PARAMS,mia_hostnum),                  BYTE_PARAM,         N_A_BOUND,        N_A_BOUND,         HOST_OWNED,             0x05,          0x2E,        CHANGE_BYTE,   FALSE},    // mia_hostnum
{NUM_ADF_RULES,                   offsetof(STRING_PARAMS,rule_buffer),                STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         HOST_OWNED,             N_A,           N_A,         CHANGE_STRING, FALSE},    // rule_buffer
{NUM_DEMOTE_RSS,                  0x05,                                               BIT_6,                      0,                1,         DEC_OWNED,              0x02,          0x03,        BIT_4,         FALSE},    // demote_rss
{NUM_COMPOSITE_BEEP,              offsetof(BYTE_PARAMS,comp_beep_mode),               BYTE_PARAM,                 0,                2,         DEC_OWNED,              0x05,          0x0f,        CHANGE_BYTE,   FALSE},    // comp_beep_mode
{NUM_SCAN_ST_SESS_TO,             offsetof(BYTE_PARAMS,ScanStandSessTo),              BYTE_PARAM,                 2,              255,         DEC_OWNED,              0x05,          0x2F,        CHANGE_BYTE,   FALSE},    // ScanStandSessTo
#if !defined(INCLUDE_MP7000)
{NUM_SCANLINE_WIDTH,              offsetof(BYTE_PARAMS,scanline_width),               BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         CHANGE_BYTE,   FALSE},    // scanline_width
#endif
{NUM_C25_REDUN,                   0x08,                                               BIT_4,                      0,                1,         DEC_OWNED,              0x04,          0x07,        BIT_0,         FALSE},    // c25_red_enabled
{NUM_C25,                         0x02,                                               BIT_6,                      0,                1,         DEC_OWNED,              0x00,          0x04,        BIT_5,         TRUE },    // c25_en
{NUM_HOST_BEEP_CONTROL,           0x08,                                               BIT_6,                      0,                1,         DEC_OWNED,              0x04,          0x07,        BIT_3,         FALSE},    // host_beep_control
{NUM_IMAGE_SIG_JPEG_QUALITY,      offsetof(BYTE_PARAMS,SigJPEGQuality),               BYTE_PARAM,                 5,              100,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // SigJPEGQuality
{NUM_EMUL_UCCEAN128,              0x10,                                               BIT_5,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    //  UCCEAN_C128_Emul
{NUM_PARAM_TYPE99,                0x10,                                               BIT_6,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // param_type99
#if defined(OEM_BUILD) && !defined(INCLUDE_DS9808)
{NUM_XMIT_MODE,                   offsetof(BYTE_PARAMS,xmit_mode),                    BYTE_PARAM,                 0,                4,         DEC_OWNED,              OLD_SECTION_N, 0x00,        CHANGE_BYTE,   FALSE},    // for macro pfd - buffer all symbols etc. // oem added this one for macropdf to buffer or not - for now, IPOS-2 will only do buffered mode
{NUM_XMIT_PROTOCOL,               offsetof(BYTE_PARAMS,xmit_protocol),                BYTE_PARAM,                 0,                2,         DEC_OWNED,              OLD_SECTION_N, 0x04,        CHANGE_BYTE,   FALSE},    // xmit_protocol gli, eci, none // oem added this one to use gli so macropdf control block could be sent - for now we only do buffered mode
#endif
{NUM_LINEAR_UPC,                  0x07,                                               BIT_3,                      0,                1,         DEC_OWNED,              0x04,          0x03,        BIT_2,         FALSE},    // linear_upc_enabled
#if defined(OEM_BUILD) && !defined(INCLUDE_DS9808)
{NUM_XMIT_BLK_INDEX,              0x0e,                                               BIT_3,                      0,                1,         DEC_OWNED,              OLD_SECTION_M, 0x01,        BIT_1,         FALSE},    // xmit_block_index
{NUM_XMT_CODE_ID_CHAR,            0x03,                                               BIT_6,                      0,                1,         DEC_OWNED,              0x02,          0x00,        BIT_7,         FALSE},    // xmit_code_id_char
#endif
{NUM_IMAGE_FUZZY_1D,              0x10,                                               BIT_7,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    //  image_fuzzy_1D
{NUM_MIRROR_IMAGE,                offsetof(BYTE_PARAMS,MirrorImage),                  BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    //  MirrorImage
#if defined(INCLUDE_RSM)
{NUM_MODEL_NUMBER,                offsetof(SPECIAL_PARAMS,model_num),                 STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         SPECIAL,                N_A,           N_A,         N_A,           FALSE},    // model_num
{NUM_SERIAL_NUMBER,               offsetof(SPECIAL_PARAMS,serial_num),                STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         SPECIAL,                N_A,           N_A,         N_A,           FALSE},    // serial_num
{NUM_DATE_OF_MANUFACTURE,         offsetof(SPECIAL_PARAMS,date_of_manufacture),       STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         SPECIAL,                N_A,           N_A,         N_A,           FALSE},    // date_of_manufacture
{NUM_DATE_OF_SERVICE,             offsetof(SPECIAL_PARAMS,date_of_service),           STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         SPECIAL,                N_A,           N_A,         N_A,           FALSE},    // date_of_service
{NUM_DATE_FIRST_PROGRAM,          offsetof(SPECIAL_PARAMS,date_of_first_program),     STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         SPECIAL,                N_A,           N_A,         N_A,           FALSE},    // date_of_first_electronic_programming
{NUM_RSM_DEVICE_LEVEL,            offsetof(SPECIAL_PARAMS,rsm_device_level),          BYTE_PARAM,         N_A_BOUND,        N_A_BOUND,         SPECIAL,                N_A,           N_A,         N_A,           FALSE},    // rsm_device_level
{NUM_PARAMETER_LOCK,              0x12,                                               BIT_7,                      0,                1,         DEC_OWNED,              0x04,          0x08,        BIT_0,         FALSE},    // parameter_lock
{NUM_CONFIG_FILE,                 offsetof(STRING_PARAMS,config_file),                STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         DEC_OWNED,              N_A,           N_A,         CHANGE_STRING, FALSE},    // config_file
{NUM_FEATURE_SET,                 offsetof(SPECIAL_PARAMS,feature_set),               BYTE_PARAM,         N_A_BOUND,        N_A_BOUND,         SPECIAL,                N_A,           N_A,         N_A,           FALSE},    /* Feature Set */
#endif
{NUM_IMG_JPEG_FILESIZEW,          offsetof(WORD_PARAMS,JPEGFilesizeW),                WORD_PARAM,                 5,              350,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // JPEGFilesizeW
{NUM_IMG_ENHANCEMENT,             offsetof(BYTE_PARAMS,img_enhancement),              BYTE_PARAM,                 0,                4,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // img_enhancement
{NUM_ILLUM_BANK_CTRL,             offsetof(BYTE_PARAMS,illum_bank_ctrl),              BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // illum_bank_ctrl
{NUM_SIGCAP2PASS,                 0x11,                                               BIT_0,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // sigcap2pass
{NUM_XMIT_IMAGE,                  0x11,                                               BIT_1,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // xmit_image
{NUM_PRESENTATION_ZONE,           offsetof(BYTE_PARAMS,presentation_zone),            BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // PRESENTATION ZONE
{NUM_UQR_EN,                      0x11,                                               BIT_2,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           TRUE },    // uqr_en
{NUM_AZTEC,                       0x11,                                               BIT_3,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           TRUE },    // aztec_en
{NUM_BOOKLAND_FORMAT,             0x11,                                               BIT_5,                      0,                1,         DEC_OWNED,              0x04,          0x07,        BIT_6,         TRUE },    // bookland_format
#if !defined(INCLUDE_MP7000)
{NUM_ISBT_CONCAT_AUTOD,           offsetof(BYTE_PARAMS,isbt_concat_autod),            BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // isbt_concat_autod
{NUM_CHECK_ISBT_TABLE,            0x11,                                               BIT_7,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // check_ISBT_table
#endif
{NUM_SUPP_USER_1,                 offsetof(WORD_PARAMS,supp_user_1),                  WORD_PARAM,                 0,              999,         DEC_OWNED,              0x05,          0x34,        CHANGE_WORD,   FALSE},    // supp_user_1
{NUM_SUPP_USER_2,                 offsetof(WORD_PARAMS,supp_user_2),                  WORD_PARAM,                 0,              999,         DEC_OWNED,              0x05,          0x36,        CHANGE_WORD,   FALSE},    // supp_user_2
{NUM_1D_INVERSE,                  offsetof(BYTE_PARAMS,inverse_1d),                   BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // inverse_1d
{NUM_QR_INVERSE,                  offsetof(BYTE_PARAMS,qr_inverse),                   BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // qr_inverse
{NUM_DATAMATRIX_INVERSE,          offsetof(BYTE_PARAMS,datamatrix_inverse),           BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // datamatrix_inverse
{NUM_AZTEC_INVERSE,               offsetof(BYTE_PARAMS,aztec_inverse),                BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // aztec_inverse
{NUM_PDF_SECURITY_LEVEL,          offsetof(BYTE_PARAMS,pdf_security),                 BYTE_PARAM,                 0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // pdf_security
{NUM_BLINK_SNAP_BY_MOTION,        0x12,                                               BIT_0,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // blink_snap_bymotion
{NUM_CONTINUE_SNAPSHOT,           0x12,                                               BIT_1,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // continuous_snapshot
{NUM_BEEPER_DURATION,             offsetof(BYTE_PARAMS,beeper_duration),              BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // beeper_duration
{NUM_IMG_SNAP_DUPLEX,             0x12,                                               BIT_3,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // image_snapshot_duplex
#if !defined(INCLUDE_MP7000)
{NUM_CONTINUE_BC_READ,            0x12,                                               BIT_6,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // continuous_barcode_read
#endif
{NUM_ISSN_EAN_EN,                 0x13,                                               BIT_7,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           TRUE },    // issn_EAN_en
{NUM_MULTICODE_EXPRESSION,        offsetof(STRING_PARAMS,multi_code_express),         STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // multi_code_express
{NUM_IMG_EDGE_SHARPEN,            offsetof(BYTE_PARAMS,img_edge_sharpening),          BYTE_PARAM,                 0,              255,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // img_edge_sharpening
{NUM_IMG_CONTRAST_ENHANCEMENT,    offsetof(BYTE_PARAMS,img_contrast_enhancement),     BYTE_PARAM,                 0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // img_contrast_enhancement
{NUM_VIDEO_SUBSAMPLE,             offsetof(BYTE_PARAMS,video_subsample),              BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // video_subsample
{NUM_RS232_RX_IN_LOW_POWER,       0x14,                                               BIT_0,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rs232_rx_in_low_power
{NUM_AIMID_SUPP_FORMAT,           offsetof(BYTE_PARAMS,aimid_supp_format),            BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // aimid_supp_format
{NUM_2D_PARAM_PROG,               offsetof(BYTE_PARAMS,TwoD_param_prog),              BYTE_PARAM,                 0,              255,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // TwoD_param_prog
{NUM_CELL_EN,                     offsetof(BYTE_PARAMS,cell_en),                      BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // cell_en
{NUM_DMV_PROCESSING,              0x14,                                               BIT_5,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // DMV_processing_en
{NUM_DMV_TIMEOUT,                 offsetof(WORD_PARAMS,DMV_timeout),                  WORD_PARAM,                 0,             5000,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // DMV_timeout
{NUM_TRIG_TIMEOUT_SAME_SYMBOL,    0x14,                                               BIT_4,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // trig_same_symbol_to
{NUM_MULTICODE_CONCAT,            0x14,                                               BIT_2,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // multi_code_concat_en
{NUM_MULTICODE_CONCAT_CODE_TYPE,  offsetof(BYTE_PARAMS,multi_code_concat_code_type),  BYTE_PARAM,                 1,                4,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // multi_code_concat_code_type
{NUM_UNIQUEESS_EN,                0x14,                                               BIT_3,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // continuous_bc_read_uniqueness_en
{NUM_MIRROR_SENSOR_IMAGE,         0x15,                                               BIT_0,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A ,          FALSE},    // mirror_sensor_image
{NUM_USER_PARAM_PASSTHROUGH,      0x15,                                               BIT_1,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // user_param_passthrough
{NUM_VAL_CONCAT_PARAM_BARCODE,    0x15,                                               BIT_2,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // val_concat_param_barcode
{NUM_IMAGE_FILE_METADATA,         0x15,                                               BIT_3,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // image_file_metadata
#ifdef INCLUDE_SYSTEM_OCR
{NUM_OCR_BRIGHT_ILLUM,            0x15,                                               BIT_4,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_bright_illum
{NUM_OCRA_EN,                     0x15,                                               BIT_5,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocra_enable
{NUM_OCRB_EN,                     0x15,                                               BIT_6,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocrb_enable
{NUM_MICR_E13B_EN,                0x15,                                               BIT_7,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // micr_e13b_enable
{NUM_USCURRENCY_EN,               0x16,                                               BIT_0,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // uscurrency_enable
{NUM_OCR_FINDER_EN,               0x16,                                               BIT_1,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_finder_en
{NUM_OCR_FINDER_EXTERNAL,         0x16,                                               BIT_2,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_finder_external
{NUM_OCRA_VARIANT,                offsetof(BYTE_PARAMS,ocra_variant       ),          BYTE_PARAM,                 0,                5,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocra_variant
{NUM_OCRB_VARIANT,                offsetof(BYTE_PARAMS,ocrb_variant       ),          BYTE_PARAM,                 0,               10,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocrb_variant
{NUM_OCR_ORIENTATION,             offsetof(BYTE_PARAMS,ocr_orientation    ),          BYTE_PARAM,                 0,                4,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_orientation
{NUM_OCR_CHK_DGT_MOD,             offsetof(BYTE_PARAMS,ocr_chk_dgt_mod    ),          BYTE_PARAM,                 1,               99,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_chk_dgt_mod
{NUM_OCR_MIN_CHAR,                offsetof(BYTE_PARAMS,ocr_min_char       ),          BYTE_PARAM,                 3,              100,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_min_char
{NUM_OCR_MAX_CHAR,                offsetof(BYTE_PARAMS,ocr_max_char       ),          BYTE_PARAM,                 3,              100,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_max_char
{NUM_OCR_LINES,                   offsetof(BYTE_PARAMS,ocr_lines          ),          BYTE_PARAM,                 1,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_lines
{NUM_OCR_SECURITY_LEVEL,          offsetof(BYTE_PARAMS,ocr_security_level ),          BYTE_PARAM,                10,               90,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_security_level
{NUM_OCR_CHK_DGT_VALID,           offsetof(BYTE_PARAMS,ocr_chk_dgt_valid  ),          BYTE_PARAM,                 0,               11,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_chk_dgt_valid
{NUM_OCR_QUIET_ZONE,              offsetof(BYTE_PARAMS,ocr_quiet_zone     ),          BYTE_PARAM,                20,               99,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_quiet_zone
{NUM_OCR_BW_LEVEL,                offsetof(BYTE_PARAMS,ocr_bw_level       ),          BYTE_PARAM,                 0,               99,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_bw_level
{NUM_OCR_DESPECKLE,               offsetof(BYTE_PARAMS,ocr_despeckle      ),          BYTE_PARAM,                 0,               99,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_despeckle
{NUM_OCR_THICKEN,                 offsetof(BYTE_PARAMS,ocr_thicken        ),          BYTE_PARAM,                 0,               16,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_thicken
{NUM_OCR_LOW_PASS_FILTER,         offsetof(BYTE_PARAMS,ocr_low_pass_filter),          BYTE_PARAM,                 0,               20,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr_low_pass_filter
{NUM_OCR_SUBSET,                  offsetof(STRING_PARAMS,ocr_subset       ),          STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr subset expression
{NUM_OCR_TEMPLATE1,               offsetof(STRING_PARAMS,ocr_template1    ),          STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // ocr template expression
{NUM_OCR_CHK_DGT_MULTI,           offsetof(STRING_PARAMS,ocr_chk_dgt_multi),          STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // checksum check digit weight string
#endif // INCLUDE_SYSTEM_OCR
#ifdef INCLUDE_RFID
{NUM_RFID_BEEPER_FREQ,            offsetof(BYTE_PARAMS,rfid_beeper_freq   ),          BYTE_PARAM,                 0,                4,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_beeper_freq
{NUM_RFID_SAME_TAG_TO,            offsetof(BYTE_PARAMS,rfid_same_tag_to   ),          BYTE_PARAM,                 0,             0x2f,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_same_tag_to
{NUM_RFID_HANDSFREE_MODE,         offsetof(BYTE_PARAMS,rfid_handsfree_mode),          BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_handsfree_mode
{NUM_RFID_TRIG_MODE,              offsetof(BYTE_PARAMS,rfid_trig_mode     ),          BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_trig_mode
{NUM_RFID_XMIT_FORMAT,            offsetof(BYTE_PARAMS,rfid_xmit_format   ),          BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_xmit_format
{NUM_RFID_RPT_BUFF_FULL,          offsetof(BYTE_PARAMS,rfid_rpt_buff_full ),          BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_rpt_buff_full
{NUM_RFID_XMIT_UNKN_TAG,          0x17,                                               BIT_3,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_xmit_unkn_tag
{NUM_RFID_ANTENNA_SELECT,         offsetof(BYTE_PARAMS,rfid_antenna_select),          BYTE_PARAM,                 0,                4,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_antenna_select
{NUM_RFID_ANTENNA_PWR_HH,         offsetof(BYTE_PARAMS,rfid_antenna_pwr_hh),          BYTE_PARAM,                 1,                7,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_antenna_pwr_hh
{NUM_RFID_ANTENNA_PWR_HF,         offsetof(BYTE_PARAMS,rfid_antenna_pwr_hf),          BYTE_PARAM,                 1,                7,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_antenna_pwr_hf
{NUM_RFID_HF_IDLE_TO,             offsetof(BYTE_PARAMS,rfid_hf_idle_to    ),          BYTE_PARAM,                 0,             0x2f,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_hf_idle_to
{NUM_RFID_XMIT_RAW_W_PC,          0x17,                                               BIT_4,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_xmit_raw_w_pc
{NUM_RFID_XMIT_APPEND_RSSI,       0x17,                                               BIT_5,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // rfid_xmit_append_rssi
#endif
{NUM_IMG_ROTATION,                offsetof(BYTE_PARAMS,img_rotation),                 BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // img_rotation
{NUM_STATIC_CDC,                  0x14,                                               BIT_7,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // static_cdc_port
{NUM_POST_AUS_FMT,                offsetof(BYTE_PARAMS,Post_Aus_Fmt),                 BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // Post_Aus_Fmt
{NUM_SUPPRESS_PWRUP_BEEPS,        0x17,                                               BIT_6,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // SUPPRESS_PWRUP_BEEPS
{NUM_EXCLUSIVE_CODE128_EN,        0x17,                                               BIT_7,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // exclusive_code128_en
{NUM_DATABAR_LIM_SEC_LEV,         offsetof(BYTE_PARAMS,databar_lim_sec_lev),          BYTE_PARAM,                 0,                4,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // databar_lim_sec_lev
{NUM_COUPON_REPORT,               offsetof(BYTE_PARAMS,coupon_report),                BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // coupon_report
{NUM_C39_SECURITY_LEVEL,          offsetof(BYTE_PARAMS,code39_security_level),        BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    /* code39_security_level  */
{NUM_C128_SECURITY_LEVEL,         offsetof(BYTE_PARAMS,code128_security_level),       BYTE_PARAM,                 0,                3,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    /* code128_security_level */
{NUM_PROXIMITY_ENABLE,            0x18,                                               BIT_7,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    /* proximity_enable       */
#ifdef INCLUDE_DLPARSE
{NUM_DL_PARSE_MODE,               offsetof(BYTE_PARAMS,dl_parse_mode),                BYTE_PARAM,                 0,                2,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // dl_parse_mode
{NUM_DL_PARSE_BUFF,               offsetof(STRING_PARAMS,dl_parse_buff),              STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // dl_parse_buff
#endif
{NUM_PAR_PROCESS_MODE,            0x28,                                               BYTE_PARAM,                 0,                2,         DEC_OWNED,              0x05,          0x22,        CHANGE_BYTE,   FALSE },   // param_process_mode
#ifdef INCLUDE_CRYPTO
{NUM_FIPS_MODE,                   0x18,                                               BIT_1,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // fips_mode
{NUM_AES_KEY,                     offsetof(SPECIAL_PARAMS,aes_key),                   STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         SPECIAL,                N_A,           N_A,         N_A,           FALSE},    // aes_key
{NUM_SHARED_KEY,                  offsetof(STRING_PARAMS,shared_key),                 STRING_PARAM,       N_A_BOUND,        N_A_BOUND,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    // shared_key
#endif
{NUM_CODABAR_CASE,                0x18,                                               BIT_3,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},    /* codabar_start_stop_char_case */
{NUM_EMBEDDED_SCAN_ENGINE,        0x18,                                               BIT_6,                      0,                1,         DEC_OWNED,              N_A,           N_A,         N_A,           FALSE},

/*  par_num                                      offset                                                                type            min_val             max_val      owner    old:sect offset type          code_type  */
/*  -------                                      -----                                                                 -----           -------             -------      -----    -------- ------ ----           --------  */
{NUM_ILLUM_HORIZ_LEFT_PHASE_SHIFT1,              offsetof(SPECIAL_PARAMS,illum_horiz_left_phase_shift1),               WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_horiz_left_phase_shift1
{NUM_ILLUM_HORIZ_CENTER_PHASE_SHIFT1,            offsetof(SPECIAL_PARAMS,illum_horiz_center_phase_shift1),             WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_horiz_center_phase_shift1
{NUM_ILLUM_HORIZ_RIGHT_PHASE_SHIFT1,             offsetof(SPECIAL_PARAMS,illum_horiz_right_phase_shift1),              WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_horiz_right_phase_shift1
{NUM_EXPOSURE_HORIZ_DURATION1,                   offsetof(SPECIAL_PARAMS,exposure_horiz_duration1),                    WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // exposure_horiz_duration1
{NUM_GAIN_HORIZ_1,                               offsetof(SPECIAL_PARAMS,gain_horiz_1),                                WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // gain_horiz_1
{NUM_ANALOG_GAIN_HORIZ_1,                        offsetof(SPECIAL_PARAMS,analog_gain_horiz_1),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // alalog_gain_horiz_1
{NUM_ILLUM_VERT_LEFT_PHASE_SHIFT1,               offsetof(SPECIAL_PARAMS,illum_vert_left_phase_shift1),                WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_vert_left_phase_shift1
{NUM_ILLUM_VERT_CENTER_PHASE_SHIFT1,             offsetof(SPECIAL_PARAMS,illum_vert_center_phase_shift1),              WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_vert_center_phase_shift1
{NUM_ILLUM_VERT_RIGHT_PHASE_SHIFT1,              offsetof(SPECIAL_PARAMS,illum_vert_right_phase_shift1),               WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_vert_right_phase_shift1
{NUM_UNSOL_HEARTBEAT_INTV,                       offsetof(WORD_PARAMS,unsol_heartbeat_intv),                           WORD_PARAM,             0,               9999, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // unsol_heartbeat_intv
{NUM_EXPOSURE_VERT_DURATION1,                    offsetof(SPECIAL_PARAMS,exposure_vert_duration1),                     WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // exposure_vert_duration1
{NUM_GAIN_VERT_1,                                offsetof(SPECIAL_PARAMS,gain_vert_1),                                 WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // gain_vert_1
{NUM_ANALOG_GAIN_VERT_1,                         offsetof(SPECIAL_PARAMS,analog_gain_vert_1),                          WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // alalog_gain_vert_1
                                                                                                                                                                                                             
{NUM_ILLUM_HORIZ_LEFT_PHASE_SHIFT2,              offsetof(SPECIAL_PARAMS,illum_horiz_left_phase_shift2),               WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_horiz_left_phase_shift2
{NUM_ILLUM_HORIZ_CENTER_PHASE_SHIFT2,            offsetof(SPECIAL_PARAMS,illum_horiz_center_phase_shift2),             WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_horiz_center_phase_shift2
{NUM_ILLUM_HORIZ_RIGHT_PHASE_SHIFT2,             offsetof(SPECIAL_PARAMS,illum_horiz_right_phase_shift2),              WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_horiz_right_phase_shift2
{NUM_EXPOSURE_HORIZ_DURATION2,                   offsetof(SPECIAL_PARAMS,exposure_horiz_duration2),                    WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // exposure_horiz_duration2
{NUM_GAIN_HORIZ_2,                               offsetof(SPECIAL_PARAMS,gain_horiz_2),                                WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // gain_horiz_2
{NUM_ANALOG_GAIN_HORIZ_2,                        offsetof(SPECIAL_PARAMS,analog_gain_horiz_2),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // alalog_gain_horiz_2
{NUM_ILLUM_VERT_LEFT_PHASE_SHIFT2,               offsetof(SPECIAL_PARAMS,illum_vert_left_phase_shift2),                WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_vert_left_phase_shift2
{NUM_ILLUM_VERT_CENTER_PHASE_SHIFT2,             offsetof(SPECIAL_PARAMS,illum_vert_center_phase_shift2),              WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_vert_center_phase_shift2
{NUM_ILLUM_VERT_RIGHT_PHASE_SHIFT2,              offsetof(SPECIAL_PARAMS,illum_vert_right_phase_shift2),               WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_vert_right_phase_shift2
{NUM_EXPOSURE_VERT_DURATION2,                    offsetof(SPECIAL_PARAMS,exposure_vert_duration2),                     WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // exposure_vert_duration2
{NUM_GAIN_VERT_2,                                offsetof(SPECIAL_PARAMS,gain_vert_2),                                 WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // gain_vert_2
{NUM_ANALOG_GAIN_VERT_2,                         offsetof(SPECIAL_PARAMS,analog_gain_vert_2),                          WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // alalog_gain_vert_2
{NUM_ILLUM_HORIZ_DURATION,                       offsetof(SPECIAL_PARAMS,illum_horiz_duration),                        WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_horiz_duration
{NUM_ILLUM_VERT_DURATION,                        offsetof(SPECIAL_PARAMS,illum_vert_duration),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // illum_vert_duration
{NUM_GUARANTEED_SWIPE_FRAMES,                    offsetof(WORD_PARAMS,guaranteed_swipe_frames),                        WORD_PARAM,             4,                 56, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // guaranteed_swipe_frames
{NUM_MOTION_PROXIMITY_THRESHOLD,                 offsetof(SPECIAL_PARAMS,motion_proximity_threshold),                  WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // motion_proximity_threshold
{NUM_ODYSSEY_TEST,                               offsetof(WORD_PARAMS,odyssey_test),                                   WORD_PARAM,     N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // odyssey_test
{NUM_DIAG_SUFFIX,                                offsetof(BYTE_PARAMS,diag_suffix),                                    BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // diag_suffix
{NUM_SCALE_PRESENT,                              offsetof(SPECIAL_PARAMS,scale_present),                               BYTE_PARAM,             0,                  1,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // scale_present
{NUM_EAS_PRESENT,                                offsetof(SPECIAL_PARAMS,eas_present),                                 BYTE_PARAM,             0,                  1,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // eas_present
{NUM_IMG_HW_ASSIST,                              offsetof(SPECIAL_PARAMS,img_hw_assist),                               WORD_PARAM,             0,                  1,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // img_hw_assist
{NUM_HORIZ_IMG_SPLIT1,                           offsetof(SPECIAL_PARAMS,horiz_img_split1),                            WORD_PARAM,             0,   IMG_WIDTH_SENSOR,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // horiz_img_split1
{NUM_HORIZ_IMG_SPLIT2,                           offsetof(SPECIAL_PARAMS,horiz_img_split2),                            WORD_PARAM,             0,   IMG_WIDTH_SENSOR,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // horiz_img_split2
{NUM_VERT_IMG_SPLIT1,                            offsetof(SPECIAL_PARAMS,vert_img_split1),                             WORD_PARAM,             0,   IMG_WIDTH_SENSOR,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // vert_img_split1
{NUM_VERT_IMG_SPLIT2,                            offsetof(SPECIAL_PARAMS,vert_img_split2),                             WORD_PARAM,             0,   IMG_WIDTH_SENSOR,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // vert_img_split2
{NUM_KEEP_HW_ASSIST_DATA,                        0x19,                                                                 BIT_0,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // keep_hw_assist_data

{NUM_EAS_OPERATING_MODE,                         offsetof(BYTE_PARAMS,eas_operating_mode),                             BYTE_PARAM,             0,                 10, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* eas_operating_mode                        */
{NUM_EAS_DEACT,                                  0x19,                                                                 BIT_1,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* eas_deactivation                          */
{NUM_EAS_DETECT_GEIGER_COUNTER,                  0x19,                                                                 BIT_2,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* eas_detect_geiger_counter                 */
{NUM_EAS_DEACT_OVERRIDE_BUTTON,                  0x19,                                                                 BIT_3,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* eas_deactivation_override_button          */
{NUM_EAS_DEACT_TIMEOUT,                          offsetof(BYTE_PARAMS,eas_deactivation_timeout),                       BYTE_PARAM,             1,                 29, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* eas_deactivation_timeout                  */
{NUM_EAS_CHCKPT_INTERLOCK_POL,                   0x19,                                                                 BIT_4,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* eas_checkpoint_interlock_polarity         */
{NUM_EAS_STAG_BEEP,                              offsetof(BYTE_PARAMS,eas_stag_beep),                                  BYTE_PARAM,             0,                  2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* eas_stag_beep                             */
{NUM_EAS_HTAG_BEEP,                              offsetof(BYTE_PARAMS,eas_htag_beep),                                  BYTE_PARAM,             0,                  2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* eas_htag_beep                             */
{NUM_SCALE_POLE_DISPLAY_CONFIG,                  offsetof(BYTE_PARAMS,scale_pole_display_config),                      BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* scale_pole_display_config                 */
{NUM_SCALE_AUTO_ZERO_RETURN,                     0x19,                                                                 BIT_5,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* scale_auto_zero_return                    */
{NUM_SCALE_BEEP_AFTER_WEIGHT,                    0x19,                                                                 BIT_6,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* scale_beep_after_weight                   */
{NUM_SCALE_ENABLE_ZERO_BUTTON,                   0x19,                                                                 BIT_7,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* scale_enable_zero_button                  */
{NUM_SCALE_SERIAL_NUMBER,                        offsetof(SPECIAL_PARAMS,scale_serial_number),                         STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_serial_number                       */
{NUM_SCALE_DATE_OF_MANUFACTURER,                 offsetof(SPECIAL_PARAMS,scale_date_of_manufacturer),                  STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_date_of_manufacturer                */
{NUM_SCALE_SW_REVISION,                          offsetof(SPECIAL_PARAMS,scale_sw_revision),                           STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_sw_revision                         */
{NUM_SCALE_ODM_VER,                              offsetof(SPECIAL_PARAMS,scale_odm_revision),                          STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_odm_revision                        */
{NUM_SCALE_MODEL_NUMBER,                         offsetof(SPECIAL_PARAMS,scale_model_number),                          STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_model_number                        */
{NUM_LEGAL_SCALE_UNITS,                          offsetof(SPECIAL_PARAMS,legal_scale_units),                           BYTE_PARAM,             0,                  1, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* legal_scale_units                         */
{NUM_LEGAL_SCALE_DAMP_FLTR_SETTING,              offsetof(SPECIAL_PARAMS,legal_scale_dampening_filter_setting),        BYTE_PARAM,             0,                  7, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* legal_scale_damp_fltr_setting             */
{NUM_SCALE_RS_GC_PROGRAMMED,                     offsetof(SPECIAL_PARAMS,scale_rs_gc_programmed),                      BYTE_PARAM,             0,                  1, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_rs_gc_programmed             */
{NUM_GC_CAL_LOC_SCALE_LATITUDE,                  offsetof(SPECIAL_PARAMS,gc_cal_loc_scale_latitude),                   STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_latitude                            */
{NUM_GC_CAL_LOC_SCALE_HEIGHT_ASL,                offsetof(SPECIAL_PARAMS,gc_cal_loc_scale_height_asl),                 STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_height_above_sea_level              */
{NUM_GC_LOC_OF_USE_SCALE_LATITUDE,               offsetof(SPECIAL_PARAMS,gc_loc_of_use_scale_latitude),                STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_latitude                            */
{NUM_GC_LOC_OF_USE_SCALE_HEIGHT_ASL,             offsetof(SPECIAL_PARAMS,gc_loc_of_use_scale_height_asl),              STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL  ,       N_A, N_A, N_A,            FALSE},   /* scale_height_above_sea_level              */
{NUM_IMG_SPLIT_DECODE,                           0x1A,                                                                 BIT_0,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* img_split_decode                          */
{NUM_ENABLE_CMDLINE,                             0x1A,                                                                 BIT_1,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* enable_cmdline                            */
{NUM_SCALE_ISCALIBRATED,                         offsetof(SPECIAL_PARAMS,scale_iscalibrated),                          BYTE_PARAM,             0,                  1, SPECIAL,         N_A, N_A, N_A,            FALSE},   /* scale_iscalibrated                        */
{NUM_MOTION_PROXIMITY_THRESHOLD_LEFTCENTER,      offsetof(SPECIAL_PARAMS,motion_proximity_threshold_leftcenter),       WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // motion_proximity_threshold_leftcenter
{NUM_MOTION_PROXIMITY_THRESHOLD_LEFT,            offsetof(SPECIAL_PARAMS,motion_proximity_threshold_left),             WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // motion_proximity_threshold_left
{NUM_MOTION_PROXIMITY_CENTER,                    0x1A,                                                                 BIT_2,          N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // motion_proximity_center
#if !defined(INCLUDE_MP7000)
{NUM_CENTER_OBJECT_DETECT,                       0x1A,                                                                 BIT_3,          N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // center_object_detect
#endif
{NUM_AUX_SEND_TYPE_AS,                           offsetof(BYTE_PARAMS, aux_send_type_as),                              BYTE_PARAM,             1,               0xff, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* aux_send_type_as*/
{NUM_TIME_TO_DECODE_MODE,                        offsetof(BYTE_PARAMS, time_to_decode_mode),                           BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // time_to_decode_mode
{NUM_ODYSSEY_RESERVED_12,                        offsetof(SPECIAL_PARAMS,odyssey_reserved_12),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // odyssey_test
{NUM_ODYSSEY_RESERVED_13,                        offsetof(SPECIAL_PARAMS,odyssey_reserved_13),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // odyssey_test
{NUM_ODYSSEY_RESERVED_14,                        offsetof(SPECIAL_PARAMS,odyssey_reserved_14),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // odyssey_test
{NUM_ODYSSEY_RESERVED_15,                        offsetof(SPECIAL_PARAMS,odyssey_reserved_15),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // odyssey_test
{NUM_ODYSSEY_RESERVED_16,                        offsetof(SPECIAL_PARAMS,odyssey_reserved_16),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // odyssey_test
{NUM_ODYSSEY_RESERVED_17,                        offsetof(SPECIAL_PARAMS,odyssey_reserved_17),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // odyssey_test
{NUM_ODYSSEY_RESERVED_18,                        offsetof(SPECIAL_PARAMS,odyssey_reserved_18),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // odyssey_test
{NUM_ODYSSEY_RESERVED_19,                        offsetof(SPECIAL_PARAMS,odyssey_reserved_19),                         WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // odyssey_test
{NUM_SCALE_INTERVAL_RANGE,                       offsetof(SPECIAL_PARAMS,scale_interval_range),                        BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // scale_interval_range
{NUM_MAP_VERT_RC,                                offsetof(SPECIAL_PARAMS,map_vert_rc),                                 STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // map_vert_rc
{NUM_MAP_VERT_LC,                                offsetof(SPECIAL_PARAMS,map_vert_lc),                                 STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // map_vert_lc
{NUM_MAP_HORIZ_RC,                               offsetof(SPECIAL_PARAMS,map_horiz_rc),                                STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // map_horiz_rc
{NUM_MAP_HORIZ_LC,                               offsetof(SPECIAL_PARAMS,map_horiz_lc),                                STRING_PARAM,   N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // map_horiz_lc
{NUM_SCALE_HRES_MODE,                            0x1A,                                                                 BIT_4,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scale_hres_mode
{NUM_EAS_REQ_VOLT_MESS,                          0x1A,                                                                 BIT_5,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // eas_req_volt_mess
{NUM_EAS_REQ_COMM_MESS,                          0x1A,                                                                 BIT_6,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // eas_req_comm_mess
{NUM_EAS_REQ_SCN_TIME,                           0x1A,                                                                 BIT_7,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // eas_req_scn_time
{NUM_SAV_STAT_STG,                               0x1B,                                                                 BIT_0,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // sav_stat_stg
{NUM_KEY,                                        offsetof(STRING_PARAMS,key),                                          STRING_PARAM,   N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // key
{NUM_APPS_2,                                     offsetof(SPECIAL_PARAMS,prox_is_ev2a),                                BYTE_PARAM,             0,                  1, SPECIAL,         N_A, N_A, N_A,            FALSE},   // prox_is_ev2a
{NUM_APPS_4,                                     offsetof(BYTE_PARAMS,multi_decode_level),                             BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // multi_decode_level
{NUM_APPS_5,                                     0x08,                                                                 BIT_5,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // motor_duty
{NUM_APPS_6,                                     offsetof(BYTE_PARAMS,ae_metering),                                    BYTE_PARAM,             0,                147, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ae_metering
{NUM_APPS_7,                                     0x07,                                                                 BIT_7,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // auto_raster_enabled
{NUM_APPS_8,                                     offsetof(BYTE_PARAMS,trig_a_engine),                                  BYTE_PARAM,             0,                128, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // trig_a_engine
{NUM_HL_ILLUM_CURRENT_OFF_MAX,                   offsetof(SPECIAL_PARAMS,hl_illum_current_off_max),                    BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // hl_illum_current_off_max
{NUM_HL_ILLUM_CURRENT_ON_MIN,                    offsetof(SPECIAL_PARAMS,hl_illum_current_on_min),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // hl_illum_current_on_min
{NUM_HL_ILLUM_CURRENT_ON_MAX,                    offsetof(SPECIAL_PARAMS,hl_illum_current_on_max),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // hl_illum_current_on_max
{NUM_HC_ILLUM_CURRENT_OFF_MAX,                   offsetof(SPECIAL_PARAMS,hc_illum_current_off_max),                    BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // hc_illum_current_off_max
{NUM_HC_ILLUM_CURRENT_ON_MIN,                    offsetof(SPECIAL_PARAMS,hc_illum_current_on_min),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // hc_illum_current_on_min
{NUM_HC_ILLUM_CURRENT_ON_MAX,                    offsetof(SPECIAL_PARAMS,hc_illum_current_on_max),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // hc_illum_current_on_max
{NUM_HR_ILLUM_CURRENT_OFF_MAX,                   offsetof(SPECIAL_PARAMS,hr_illum_current_off_max),                    BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // hr_illum_current_off_max
{NUM_HR_ILLUM_CURRENT_ON_MIN,                    offsetof(SPECIAL_PARAMS,hr_illum_current_on_min),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // hr_illum_current_on_min
{NUM_HR_ILLUM_CURRENT_ON_MAX,                    offsetof(SPECIAL_PARAMS,hr_illum_current_on_max),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // hr_illum_current_on_max
{NUM_VL_ILLUM_CURRENT_OFF_MAX,                   offsetof(SPECIAL_PARAMS,vl_illum_current_off_max),                    BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // vl_illum_current_off_max
{NUM_VL_ILLUM_CURRENT_ON_MIN,                    offsetof(SPECIAL_PARAMS,vl_illum_current_on_min),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // vl_illum_current_on_min
{NUM_VL_ILLUM_CURRENT_ON_MAX,                    offsetof(SPECIAL_PARAMS,vl_illum_current_on_max),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // vl_illum_current_on_max
{NUM_VC_ILLUM_CURRENT_OFF_MAX,                   offsetof(SPECIAL_PARAMS,vc_illum_current_off_max),                    BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // vc_illum_current_off_max
{NUM_VC_ILLUM_CURRENT_ON_MIN,                    offsetof(SPECIAL_PARAMS,vc_illum_current_on_min),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // vc_illum_current_on_min
{NUM_VC_ILLUM_CURRENT_ON_MAX,                    offsetof(SPECIAL_PARAMS,vc_illum_current_on_max),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // vc_illum_current_on_max
{NUM_VR_ILLUM_CURRENT_OFF_MAX,                   offsetof(SPECIAL_PARAMS,vr_illum_current_off_max),                    BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // vr_illum_current_off_max
{NUM_VR_ILLUM_CURRENT_ON_MIN,                    offsetof(SPECIAL_PARAMS,vr_illum_current_on_min),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // vr_illum_current_on_min
{NUM_VR_ILLUM_CURRENT_ON_MAX,                    offsetof(SPECIAL_PARAMS,vr_illum_current_on_max),                     BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // vr_illum_current_on_max
{NUM_TOPOLOGY_EVENT,                             0x1B,                                                                 BIT_1,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // topology event
{NUM_APPS_3,                                     0x1B,                                                                 BIT_2,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // nrf_rank_limiter
{NUM_USB_IBM_LDIO_ENABLE,                        0x1B,                                                                 BIT_3,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // usb_ibm_ldio_enable
{NUM_RANKING_FILTER_THRESHOLD,                   offsetof(SPECIAL_PARAMS,ranking_filter_threshold),                    BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // ranking_filter_threshold
{NUM_CENTROID_VERT_LEFT_X,                       offsetof(SPECIAL_PARAMS,centroid_vert_left_x),                        WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_vert_left_x
{NUM_CENTROID_VERT_LEFT_Y,                       offsetof(SPECIAL_PARAMS,centroid_vert_left_y),                        WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_vert_left_y
{NUM_CENTROID_VERT_CENTER_X,                     offsetof(SPECIAL_PARAMS,centroid_vert_center_x),                      WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_vert_center_x
{NUM_CENTROID_VERT_CENTER_Y,                     offsetof(SPECIAL_PARAMS,centroid_vert_center_y),                      WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_vert_center_y
{NUM_CENTROID_VERT_RIGHT_X,                      offsetof(SPECIAL_PARAMS,centroid_vert_right_x),                       WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_vert_right_x
{NUM_CENTROID_VERT_RIGHT_Y,                      offsetof(SPECIAL_PARAMS,centroid_vert_right_y),                       WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_vert_right_y
{NUM_CENTROID_HORIZ_LEFT_X,                      offsetof(SPECIAL_PARAMS,centroid_horiz_left_x),                       WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_horiz_left_x
{NUM_CENTROID_HORIZ_LEFT_Y,                      offsetof(SPECIAL_PARAMS,centroid_horiz_left_y),                       WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_horiz_left_y
{NUM_CENTROID_HORIZ_CENTER_X,                    offsetof(SPECIAL_PARAMS,centroid_horiz_center_x),                     WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_horiz_center_x
{NUM_CENTROID_HORIZ_CENTER_Y,                    offsetof(SPECIAL_PARAMS,centroid_horiz_center_y),                     WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_horiz_center_y
{NUM_CENTROID_HORIZ_RIGHT_X,                     offsetof(SPECIAL_PARAMS,centroid_horiz_right_x),                      WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_horiz_right_x
{NUM_CENTROID_HORIZ_RIGHT_Y,                     offsetof(SPECIAL_PARAMS,centroid_horiz_right_y),                      WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // centroid_horiz_right_y
{NUM_SCALE_ZERO_TRACKING,                        offsetof(SPECIAL_PARAMS,scale_zero_tracking),                         BYTE_PARAM,             0,                  1, SPECIAL,         N_A, N_A, N_A,            FALSE},   // scale_zero_tracking
{NUM_COERCE_UPC_EAN,                             0x1B,                                                                 BIT_4,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // coerce_upc_ean
{NUM_MOTION_PROXIMITY_BASELINE_LEFT,             offsetof(SPECIAL_PARAMS,motion_proximity_baseline_left),              WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // motion_proximity_baseline_left
{NUM_MOTION_PROXIMITY_BASELINE_CENTER,           offsetof(SPECIAL_PARAMS,motion_proximity_baseline_center),            WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // motion_proximity_baseline_center
{NUM_MOTION_PROXIMITY_BASELINE_RIGHT,            offsetof(SPECIAL_PARAMS,motion_proximity_baseline_right),             WORD_PARAM,     N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // motion_proximity_baseline_right
{NUM_ALLOW_WRITING_MFG_PARAMS,                   0x1B,                                                                 BIT_5,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // allow_writing_mfg_params
{NUM_SCALE_ENABLE,                               offsetof(BYTE_PARAMS,scale_enable),                                   BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scale_enable
{NUM_SCALE_GRAVITY_PLACE_OF_USE,                 offsetof(SPECIAL_PARAMS,scale_gravity_place_of_use),                  DWORD_PARAM,    N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // scale_gravity_place_of_use
{NUM_SCALE_GRAVITY_CAL_LOC,                      offsetof(SPECIAL_PARAMS,scale_gravity_cal_loc),                       DWORD_PARAM,    N_A_BOUND,          N_A_BOUND, SPECIAL,         N_A, N_A, N_A,            FALSE},   // scale_gravity_cal_loc
{NUM_STITCH_ITF,                                 0x1B,                                                                 BIT_6,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // stitch_itf
{NUM_STITCH_C128_SECURITY,                       offsetof(BYTE_PARAMS, stitch_c128_security),                          BYTE_PARAM,             0,                  3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // stitch_c128_security
{NUM_STITCH_C39_SECURITY,                        offsetof(BYTE_PARAMS, stitch_c39_security),                           BYTE_PARAM,             0,                  3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // stitch_c39_security
{NUM_STITCH_ITF_SECURITY,                        offsetof(BYTE_PARAMS, stitch_itf_security),                           BYTE_PARAM,             0,                  3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // stitch_itf_security
{NUM_MARGINLESS_C128_ENABLE,                     0x1B,                                                                 BIT_7,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // marginless_c128_enable
{NUM_MARGINLESS_C39_ENABLE,                      0x1C,                                                                 BIT_0,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // marginless_c39_enable
{NUM_MARGINLESS_ITF_ENABLE,                      0x1C,                                                                 BIT_1,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // marginless_itf_enable
{NUM_EAS_DEACT_FAIL_BEEP,                        offsetof(BYTE_PARAMS, eas_deact_fail_beep),                           BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // eas_deact_fail_beep
{NUM_SCAN_DISABLE_MODE,                          offsetof(BYTE_PARAMS, scan_disable_mode),                             BYTE_PARAM,             0,                  2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scan_disable_mode
{NUM_DL_PARSING_FEATURE_EN,                      offsetof(SPECIAL_PARAMS, dl_parsing_feature_en),                      BYTE_PARAM,             0,                  1, SPECIAL,         N_A, N_A, N_A,            FALSE},   // dl_parsing_feature_en
{NUM_LEFT_IR_SENSITIVITY,                        offsetof(BYTE_PARAMS, left_ir_sensitivity),                           BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // left_ir_sensitivity
{NUM_CENTER_IR_SENSITIVITY,                      offsetof(BYTE_PARAMS, center_ir_sensitivity),                         BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // center_ir_sensitivity
{NUM_RIGHT_IR_SENSITIVITY,                       offsetof(BYTE_PARAMS, right_ir_sensitivity),                          BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // right_ir_sensitivity
{NUM_STITCH_C93_ENABLE,                          0x1D,                                                                 BIT_7,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // stitch_c93_enable
{NUM_STITCH_C93_SECURITY,                        offsetof(BYTE_PARAMS, stitch_c93_security),                           BYTE_PARAM,             0,                  3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // stitch_c93_security
{NUM_MARGINLESS_C93_ENABLE,                      0x1C,                                                                 BIT_3,          N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // marginless_c93_enable
{NUM_POLE_WAS_THERE,                             0x22,                                                                 BIT_1,          N_A_BOUND, N_A_BOUND,   DEC_OWNED, N_A, N_A, N_A, FALSE},        // pole_was_there        
{NUM_EAS_WAS_THERE,                              0x21,                                                                 BIT_3,          N_A_BOUND, N_A_BOUND,   DEC_OWNED, N_A, N_A, N_A, FALSE},        // eas_was_there      
{NUM_UPCEAN_REDUNDANCY,                          offsetof(BYTE_PARAMS, upcean_redundancy),                             BYTE_PARAM,             0,                  5, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upcean_redundancy
{NUM_TIMEOUT_SWIPE,                              offsetof(WORD_PARAMS, timeout_swipe),                                 WORD_PARAM,             0,               1000, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // timeout_swipe
{NUM_TIMEOUT_DEFAULT,                            offsetof(WORD_PARAMS, timeout_default),                               WORD_PARAM,             0,               1000, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // timeout_default
{NUM_TIMEOUT_CELL,                               offsetof(WORD_PARAMS, timeout_cell),                                  WORD_PARAM,             0,               1000, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // timeout_cell
{NUM_STITCHING_TYPE,                             offsetof(BYTE_PARAMS, stitching_type),                                BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // stitching_type
#if !defined(INCLUDE_MP7000)                                                                                                                                                                                    
{NUM_SCANNING_USAGE_MODE,                        offsetof(BYTE_PARAMS, scanning_usage_mode),                           BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scanning_usage_mode
#endif                                                                                                                                                                                                          
{NUM_SCALE_DEBUG,                                offsetof(BYTE_PARAMS, scale_debug),                                   BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scale_debug
{NUM_BTN_DEBOUNCE_TIMEOUT,                       offsetof(BYTE_PARAMS, btn_debounce_timeout),                          BYTE_PARAM,             4,                100, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // btn_debounce_timeout
{NUM_NCR_USE_PREFIX,                             0x1C,                                                                 BIT_4,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_use_prefix
{NUM_NCR_USE_BCC,                                0x1C,                                                                 BIT_5,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_use_bcc
{NUM_NCR_INTERFACE,                              offsetof(BYTE_PARAMS, ncr_interface),                                 BYTE_PARAM,             0,                  2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_interface
{NUM_NCR_WEIGH_POLL,                             offsetof(BYTE_PARAMS, ncr_weigh_poll),                                BYTE_PARAM,             0,                 99, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_weigh_poll
{NUM_IGNORE_SCALE_DIRECTIVES,                    0x1C,                                                                 BIT_6,          N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ignore_scale_directives
{NUM_DEVICE_PORT_CONFIG,                         offsetof(BYTE_PARAMS, device_port_config),                            BYTE_PARAM,        0,  MAX_DEVICE_PORT_CONFIG, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // port_config
{NUM_SCALEHOST_INTERFACE,                        offsetof(BYTE_PARAMS, scaleHost_interface),                           BYTE_PARAM,        0, MAX_SCALEHOST_INTERFACE, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scaleHost_interface
{NUM_SCALEHOST_BAUDRATE,                         offsetof(BYTE_PARAMS, scaleHost_baudrate),                            BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scaleHost_baudrate
#if !defined(INCLUDE_MP7000)                                                                                                                                                                                    
{NUM_DECODE_FOV,                                 offsetof(BYTE_PARAMS, decode_fov),                                    BYTE_PARAM,             0,     MAX_DECODE_FOV, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // decode_fov
#endif
{NUM_ILLUMINATION_CONFIGS,                       offsetof(BYTE_PARAMS, illumination_configs),                          BYTE_PARAM,             0,                  9, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // illumination_configs
{NUM_PID_TYPE,                                   offsetof(BYTE_PARAMS, pid_type),                                      BYTE_PARAM,             0,       MAX_PID_TYPE, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // pid_type
{NUM_NCR_PREFIX,                                 offsetof(WORD_PARAMS, ncr_prefix),                                    WORD_PARAM,          1000,               1127, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_prefix
{NUM_NCR_SUFFIX,                                 offsetof(WORD_PARAMS, ncr_suffix),                                    WORD_PARAM,          1000,               1127, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_suffix
{NUM_SAME_SYMBOL_REPORT_TIMEOUT,                 offsetof(BYTE_PARAMS, same_symbol_report_timeout),                    BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // same_symbol_report_timeout
{NUM_SCALE_MAX_INITIAL_ZERO_SETTING_RANGE,       offsetof(BYTE_PARAMS, scale_max_initial_zero_setting_range),          BYTE_PARAM,             2,                 15, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scale_max_initial_zero_setting_range
{NUM_IBM_SCALE_DEFAULT_RESPONSE_MODE,            offsetof(BYTE_PARAMS, ibm_scale_default_response_mode),               BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ibm_scale_default_response_mode
{NUM_VOLUME_BUTTON,                              offsetof(BYTE_PARAMS, volume_button),                                 BYTE_PARAM,             0,     MAX_VOL_BUTTON, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // volume_button
{NUM_BLOCK_LIFE_SPAN,                            offsetof(BYTE_PARAMS, block_life_span),                               BYTE_PARAM,             0,                 50, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // block_life_span
{NUM_THIRD_PARTY_SCALE,                          offsetof(BYTE_PARAMS, third_party_scale),                             BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // third_party_scale
{NUM_THIRD_PARTY_SCALE_LED_PIN,                  offsetof(BYTE_PARAMS, third_party_scale_led_pin),                     BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // third_party_scale_led_pin
{NUM_THIRD_PARTY_SCALE_ZERO_PIN,                 offsetof(BYTE_PARAMS, third_party_scale_zero_pin),                    BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // third_party_scale_zero_pin
{NUM_THIRD_PARTY_SCALE_MFG_PIN,                  offsetof(BYTE_PARAMS, third_party_scale_mfg_pin),                     BYTE_PARAM,             0,        MAX_TPS_MFG, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // third_party_scale_mfg_pin
{NUM_GS1_DATAMATRIX_EN,                          0x1C,                                                                 BIT_7,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,             TRUE},   // gs1_datamatix_en
{NUM_GS1_QR_EN,                                  0x1D,                                                                 BIT_0,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,             TRUE},   // gs1_qr_en
{NUM_NCR_SCALE_BEEP_AFTER_WEIGHT,                0x1D,                                                                 BIT_1,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_scale_beep_after_weight
{NUM_WALMART_VOLUME_CONTROL,                     0x1D,                                                                 BIT_3,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // walmart_volume_control        
{NUM_VOLUME_BUTTON_BEEP_SUPPRESSION,             0x1D,                                                                 BIT_4,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // volume_button_beep_suppression
{NUM_QUICK_MOTION_DETECT,                        0x1F,                                                                 BIT_0,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // quick_motion_detect
{NUM_IR_TRACKER_ALPHA,                           offsetof(BYTE_PARAMS, ir_tracker_alpha),                              BYTE_PARAM,             0,                100, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ir_tracker_alpha   
{NUM_IR_BASELINE_ALPHA,                          offsetof(BYTE_PARAMS, ir_baseline_alpha),                             BYTE_PARAM,             0,                100, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ir_baseline_alpha  
{NUM_IR_FILTER_SIZE,                             offsetof(BYTE_PARAMS, ir_filter_size),                                BYTE_PARAM,             0,                 25, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ir_filter_size

{NUM_DECTIME_HISTOGRAM_BIN_THRESHOLD,            offsetof(STRING_PARAMS,dectime_histogram_bin_threshold),              STRING_PARAM,   N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // dectime_histogram_bin_threshold
                                                                                                                                                                                                                
{NUM_DEBUG_SC_ACQ            ,                   offsetof(BYTE_PARAMS, debug_sc_acq            ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_acq
{NUM_DEBUG_SC_CAMERA         ,                   offsetof(BYTE_PARAMS, debug_sc_camera         ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_camera
{NUM_DEBUG_SC_DECODE         ,                   offsetof(BYTE_PARAMS, debug_sc_decode         ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_decode
{NUM_DEBUG_SC_EAS            ,                   offsetof(BYTE_PARAMS, debug_sc_eas            ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_eas
{NUM_DEBUG_SC_FIRMWARE_UPDATE,                   offsetof(BYTE_PARAMS, debug_sc_firmware_update),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_firmware_update
{NUM_DEBUG_SC_FLASH_ACCESS   ,                   offsetof(BYTE_PARAMS, debug_sc_flash_access   ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_flash_access
{NUM_DEBUG_SC_IBM_RS485      ,                   offsetof(BYTE_PARAMS, debug_sc_ibm_rs485      ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_ibm_rs485
{NUM_DEBUG_SC_MOTIONDETECT   ,                   offsetof(BYTE_PARAMS, debug_sc_motiondetect   ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_motiondetect
{NUM_DEBUG_SC_NVP            ,                   offsetof(BYTE_PARAMS, debug_sc_nvp            ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_nvp
{NUM_DEBUG_SC_OS             ,                   offsetof(BYTE_PARAMS, debug_sc_os             ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_os
{NUM_DEBUG_SC_PARAM          ,                   offsetof(BYTE_PARAMS, debug_sc_param          ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_param
{NUM_DEBUG_SC_Platform       ,                   offsetof(BYTE_PARAMS, debug_sc_platform       ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_platform
{NUM_DEBUG_SC_IBM_USB        ,                   offsetof(BYTE_PARAMS, debug_sc_ibm_usb        ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_ibm_usb
{NUM_DEBUG_SC_RSI            ,                   offsetof(BYTE_PARAMS, debug_sc_rsi            ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_rsi
{NUM_DEBUG_SC_RSM            ,                   offsetof(BYTE_PARAMS, debug_sc_rsm            ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_rsm
{NUM_DEBUG_SC_SASI           ,                   offsetof(BYTE_PARAMS, debug_sc_sasi           ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_sasi
{NUM_DEBUG_SC_SNAPI          ,                   offsetof(BYTE_PARAMS, debug_sc_snapi          ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_snapi
{NUM_DEBUG_SC_SSI            ,                   offsetof(BYTE_PARAMS, debug_sc_ssi            ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_ssi
{NUM_DEBUG_SC_SCALE          ,                   offsetof(BYTE_PARAMS, debug_sc_scale          ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_scale
{NUM_DEBUG_SC_SCALEHOST      ,                   offsetof(BYTE_PARAMS, debug_sc_scalehost      ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_scalehost
{NUM_DEBUG_SC_STATS          ,                   offsetof(BYTE_PARAMS, debug_sc_stats          ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_stats
{NUM_DEBUG_SC_STG            ,                   offsetof(BYTE_PARAMS, debug_sc_stg            ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_stg
{NUM_DEBUG_SC_SYSTEM         ,                   offsetof(BYTE_PARAMS, debug_sc_system         ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_system
{NUM_DEBUG_SC_TRIGGERMGMT    ,                   offsetof(BYTE_PARAMS, debug_sc_triggermgmt    ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_triggermgmt
{NUM_DEBUG_SC_UIF            ,                   offsetof(BYTE_PARAMS, debug_sc_uif            ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_uif
{NUM_DEBUG_SC_UTILS          ,                   offsetof(BYTE_PARAMS, debug_sc_utils          ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_utils
{NUM_DEBUG_SC_USB            ,                   offsetof(BYTE_PARAMS, debug_sc_usb            ),                      BYTE_PARAM,             0,                  4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_sc_utils
{NUM_DEBUG_LOGGING_TYPE,                         offsetof(BYTE_PARAMS, debug_logging_type),                            BYTE_PARAM,             0,     MAX_DEBUG_TYPE, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_logging_type

{NUM_AUX1_BAUD,                                  offsetof(BYTE_PARAMS, aux1_baud),                                     BYTE_PARAM,     BAUD_2400,       BAUD_INHERIT, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // aux1_baud
{NUM_AUX1_STOP_BITS,                             offsetof(BYTE_PARAMS, aux1_stop_bits),                                BYTE_PARAM,             0,  STOP_BITS_INHERIT, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // aux1_stop_bits
{NUM_AUX1_PARITY,                                offsetof(BYTE_PARAMS, aux1_parity),                                   BYTE_PARAM,             0,     PARITY_INHERIT, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // aux1_parity
{NUM_AUX1_DATA_BITS,                             offsetof(BYTE_PARAMS, aux1_data_bits),                                BYTE_PARAM,             0,  DATA_BITS_INHERIT, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // aux1_data_bits
{NUM_AUX2_BAUD,                                  offsetof(BYTE_PARAMS, aux2_baud),                                     BYTE_PARAM,     BAUD_2400,       BAUD_INHERIT, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // aux2_baud
{NUM_AUX2_STOP_BITS,                             offsetof(BYTE_PARAMS, aux2_stop_bits),                                BYTE_PARAM,             0,  STOP_BITS_INHERIT, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // aux2_stop_bits
{NUM_AUX2_PARITY,                                offsetof(BYTE_PARAMS, aux2_parity),                                   BYTE_PARAM,             0,     PARITY_INHERIT, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // aux2_parity
{NUM_AUX2_DATA_BITS,                             offsetof(BYTE_PARAMS, aux2_data_bits),                                BYTE_PARAM,             0,  DATA_BITS_INHERIT, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // aux2_data_bits
{NUM_SCALE_SW_REV_IN_AUDIT_TRAIL,                offsetof(SPECIAL_PARAMS, scale_sw_rev_in_audit_trail),                BYTE_PARAM,             0,                  1, SPECIAL,         N_A, N_A, N_A,            FALSE},   // scale_sw_rev_in_audit_trail
{NUM_HOST_DATA,                                  offsetof(PERSISTENT_USER_PARAMS,host_data),                           STRING_PARAM,   N_A_BOUND,          N_A_BOUND, PERSISTENT_USER, N_A, N_A, N_A,            FALSE},   // host_data
{NUM_IGNORE_IBM_CMD,                             offsetof(BYTE_PARAMS, ignore_ibm_cmd),                                BYTE_PARAM,             0,     IGNORE_IBM_MAX, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ignore_ibm_cmd
{NUM_WATCHDOGKICK_AT_IDLE,                       offsetof(BYTE_PARAMS, watchdogkick_at_idle),                          BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // watchdogkick_at_idle
{NUM_OHIO_PDF_DR,                                offsetof(BYTE_PARAMS, ohio_pdf_dr),                                   BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ohio_pdf_dr
{NUM_DECODE_DATA_EVENTS,                         offsetof(BYTE_PARAMS, decode_data_events),                            BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // decode_data_events
{NUM_HONOR_DIRECT_IO_BEEPS,                      0x1E,                                                                 BIT_0,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // honor_direct_io_beeps
{NUM_MAX_SCALE_ZEROING_WEIGHT_LIMIT,             offsetof(BYTE_PARAMS, max_scale_zeroing_weight_limit),                BYTE_PARAM,             0,                 60, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // max_scale_zeroing_weight_limit
                                                                                                                                                                                                                
#if defined(INCLUDE_DIGIMARC)                                                                                                                                                                                   
{NUM_DIGIMARC_EN,                               offsetof(BYTE_PARAMS, digimarc_en),                                    BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            TRUE },   // digimarc_en
{NUM_DIGIMARC_IMG1_FREQ,                        offsetof(BYTE_PARAMS, digimarc_img1_freq),                             BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // digimarc_img1_freq
{NUM_DIGIMARC_IMG1_STRATEGY,                    offsetof(BYTE_PARAMS, digimarc_img1_strategy),                         BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // digimarc_img1_strategy
{NUM_DIGIMARC_IMG2_FREQ,                        offsetof(BYTE_PARAMS, digimarc_img2_freq),                             BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // digimarc_img2_freq
{NUM_DIGIMARC_IMG2_STRATEGY,                    offsetof(BYTE_PARAMS, digimarc_img2_strategy),                         BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // digimarc_img2_strategy
#endif                                                                                                                                                                                                          
#if defined(INCLUDE_SCALE)                                                                                                                                                                                      
{NUM_COLES_POLE_DISPLAY,                        offsetof(SPECIAL_PARAMS, coles_pole_display),                          BYTE_PARAM,             0,                  1, SPECIAL,         N_A, N_A, N_A,            FALSE},   // coles_pole_display
#endif    

{NUM_CDC_HOST_TYPE,                             offsetof(BYTE_PARAMS, cdc_host_type),                                  BYTE_PARAM,             0,                 10, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // cdc_host_type
                                                                                                                                                                                                    
{NUM_BEEP_ON_AUX_DECODE,                        offsetof(BYTE_PARAMS, beep_on_aux_decode),                             BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // beep_on_aux_decode
 {NUM_MGMT_HOST,                                offsetof(PERSISTENT_USER_PARAMS, mgmt_host),                           BYTE_PARAM,     N_A_BOUND,          N_A_BOUND, PERSISTENT_USER, N_A, N_A, N_A,            FALSE},   // mgmt_host
{NUM_ECLEVEL,                                   offsetof(PERSISTENT_USER_PARAMS, eclevel),                             WORD_PARAM,     N_A_BOUND,          N_A_BOUND, PERSISTENT_USER, N_A, N_A, N_A,            FALSE},   // eclevel
{NUM_IBM_SPEC_LVL,                              offsetof(BYTE_PARAMS, ibm_spec_lvl),                                   BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ibm_spec_lvl
                                                                                                                                                                                                                
{NUM_CAMERA_SELECT,                             offsetof(BYTE_PARAMS, camera_select),                                  BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // camera_select     
#if defined(INCLUDE_MP7000)                                                                                                                                                                                     
{NUM_CAMERA_BUTTON_ENABLE,                      offsetof(BYTE_PARAMS, camera_button_enable),                           BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // camera_button_enable
{NUM_CAMERA_BUTTON_DELAY,                       offsetof(BYTE_PARAMS, camera_button_delay),                            BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // camera_button_delay
#endif                                                                                                                                                                                                          
{NUM_PID_VAL,                                   offsetof(PERSISTENT_USER_PARAMS, pid_val),                             WORD_PARAM,     N_A_BOUND,          N_A_BOUND, PERSISTENT_USER, N_A, N_A, N_A,            FALSE},   // pid_val
{NUM_PRESO_FREQ_IMG1,                           offsetof(BYTE_PARAMS, preso_freq_img1),                                BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // preso_freq_img1
{NUM_PRESO_FREQ_IMG2,                           offsetof(BYTE_PARAMS, preso_freq_img2),                                BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // preso_freq_img2
{NUM_DECODE_RANGE_IMG1,                         offsetof(WORD_PARAMS, decode_range_img1),                              WORD_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // decode_range_img1
{NUM_DECODE_RANGE_IMG2,                         offsetof(WORD_PARAMS, decode_range_img2),                              WORD_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // decode_range_img2
{NUM_VGAP_SSTO,                                 offsetof(BYTE_PARAMS, vgap_ssto),                                      BYTE_PARAM,             0,                 99, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // vgap_ssto
{NUM_CELL_FREQ,                                 offsetof(BYTE_PARAMS, cell_freq),                                      BYTE_PARAM,             3,                 20, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // cell_freq
{NUM_DOUBLEDECODE_WHITELEVEL_THRESHOLD,         offsetof(BYTE_PARAMS, doubledecode_whitelevel_threshold),              BYTE_PARAM,             0,                255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // doubledecode_whitelevel_threshold
{NUM_UPC_BLK_REDUN,                             offsetof(BYTE_PARAMS, upc_blk_redun),                                  BYTE_PARAM,             1,                 10, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_blk_redun
{NUM_MULTI_DECODE_PROTECTION,                   offsetof(BYTE_PARAMS, multi_decode_protection),                        BYTE_PARAM,             0,                100, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // multi_decode_protection
{NUM_ACQ_BUFFERING,                             offsetof(BYTE_PARAMS, acq_buffering),                                  BYTE_PARAM,             1,                 25, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // acq_buffering

                                                                                                                                                                                                                
#if defined(INCLUDE_FLEXI_SCRIPT)                                                                                                                                                 
{NUM_FLEXI_ENABLE,                              0x1E,                                                                  BIT_1,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // flexi_enable
{NUM_FLEXI_SCRIPT,                              offsetof(STRING_PARAMS, flexiscript_buf),                              STRING_PARAM,   N_A_BOUND,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* FlexiScript buffer DFF  */
{NUM_FLEXI_WORD_0,                              offsetof(WORD_PARAMS,   flexi_0),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_0 DFF */
{NUM_FLEXI_WORD_1,                              offsetof(WORD_PARAMS,   flexi_1),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_1 DFF */
{NUM_FLEXI_WORD_2,                              offsetof(WORD_PARAMS,   flexi_2),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_2 DFF */
{NUM_FLEXI_WORD_3,                              offsetof(WORD_PARAMS,   flexi_3),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_3 DFF */
{NUM_FLEXI_WORD_4,                              offsetof(WORD_PARAMS,   flexi_4),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_4 DFF */
{NUM_FLEXI_WORD_5,                              offsetof(WORD_PARAMS,   flexi_5),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_5 DFF */
{NUM_FLEXI_WORD_6,                              offsetof(WORD_PARAMS,   flexi_6),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_6 DFF */
{NUM_FLEXI_WORD_7,                              offsetof(WORD_PARAMS,   flexi_7),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_7 DFF */
{NUM_FLEXI_WORD_8,                              offsetof(WORD_PARAMS,   flexi_8),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_8 DFF */
{NUM_FLEXI_WORD_9,                              offsetof(WORD_PARAMS,   flexi_9),                                      WORD_PARAM,             0,             0xFFFF, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   /* flexi_9 DFF */
#endif                                                                                                                                              

#ifdef  ADVANCED_COUNTRY_KEYBOARD_TYPE 
{NUM_COUNTRY_KBD_TYPE,                          offsetof(BYTE_PARAMS,country_kbd_type),                                BYTE_PARAM,             0,                255, HOST_OWNED,      N_A, N_A, N_A,            FALSE},   /*  country keyboard type */
{NUM_CHARACTER_ENCODING,                        offsetof(WORD_PARAMS,character_encoding),                              WORD_PARAM,             0,             0xFFFF, HOST_OWNED,      N_A, N_A, N_A,            FALSE},   /*  character encoding scheme */
{NUM_COUNTRY_KBD_DOWNLOAD,                      offsetof(STRING_PARAMS,country_kbd_layout),                            STRING_PARAM,   N_A_BOUND,          N_A_BOUND, HOST_OWNED,      N_A, N_A, N_A,            FALSE},   /* Country keyboard layout download */
{NUM_CP_DOWNLOAD,                               offsetof(STRING_PARAMS,code_page),                                     STRING_PARAM,   N_A_BOUND,          N_A_BOUND, HOST_OWNED,      N_A, N_A, CHANGE_STRING,  FALSE},   /* Code page download */
{NUM_CHINESE_NEIMA_INPUT,                       offsetof(BYTE_PARAMS,chinese_neima_input),                             BYTE_PARAM,             0,                100, HOST_OWNED,      N_A, N_A, N_A,            FALSE},   /* Chinese Simplified NeiMa input */
{NUM_CONTROL_EMULATE_INPUT,                     0x1E,                                                                  BIT_2,                  0,                  1, HOST_OWNED,      N_A, N_A, N_A,            FALSE},   /* control character emulate input enable/disable */
{NUM_DIGIT_KEYPAD_INPUT,                        0x1E,                                                                  BIT_3,                  0,                  1, HOST_OWNED,      N_A, N_A, N_A,            FALSE},   /* digital character keypad input enable/disable */
{NUM_JAP_UTF_SHIFT_JIS,                         0x1E,                                                                  BIT_4,                  0,                  1, HOST_OWNED,      N_A, N_A, N_A,            FALSE},   /* Japanese UTF-8/16 encoded barcode contains SHIFT-JIS data flag */
{NUM_COUNTRY_KBD_DOWNLOAD_SEPARATE,             offsetof(STRING_PARAMS,country_kbd_layout_separate),                   STRING_PARAM,   N_A_BOUND,          N_A_BOUND, HOST_OWNED,      N_A, N_A, CHANGE_STRING,  FALSE},   /* Country keyboard layout download */
{NUM_COUNTRY_KBD_DOWNLOAD_TYPE,                 offsetof(BYTE_PARAMS,country_kbd_download_type),                       BYTE_PARAM,             0,                255, HOST_OWNED,      N_A, N_A, N_A,            FALSE},   /* Download country keyboard type */
#endif //  ADVANCED_COUNTRY_KEYBOARD_TYPE 

{NUM_I25_SECURITY_LEVEL,                        offsetof(BYTE_PARAMS,   i25_security_level),                           BYTE_PARAM,             0,                  3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // i25_security_level
{NUM_1D_MARGINLESS_LEVEL,                       offsetof(BYTE_PARAMS,   marginless_level_1d),                          BYTE_PARAM,             0,                  3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // marginless_level_1d 
{NUM_MARGINLESS_UPC_ENABLE,                     0x1F,                                                                  BIT_1,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // marginless_upc_enable
{NUM_C128_FNC4_IGNORE,                          0x1F,                                                                  BIT_2,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // c128_fnc4_ignore
//UM_DECODE_POOR_QUALITY,                       offsetof(BYTE_PARAMS,   decode_poor_quality),                          BYTE_PARAM,             0,                  3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // decode_poor_quality 
//UM_DPM_MODE,                                  0x20,                                                                  BIT_0,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // dpm_mode
{NUM_HANXIN_EN,                                 0x20,                                                                  BIT_1,                  0,                  1, DEC_OWNED,       N_A, N_A, N_A,            TRUE },   // hanxin_enable
{NUM_HANXIN_INVERSE,                            offsetof(BYTE_PARAMS,   hanxin_inverse),                               BYTE_PARAM,             0,                  2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // hanxin_inverse
{NUM_DATABAR_SEC_LVL,                           offsetof(BYTE_PARAMS,   databar_sec_lvl),                              BYTE_PARAM,             0,                  3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // databar_sec_lvl       
{NUM_MARGINLESS_MSI_ENABLE,                     offsetof(BYTE_PARAMS,   marginless_msi_enable),                        BYTE_PARAM,             0,                  1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // marginless_msi_enable 
{NUM_DEFAULT_SPECIAL_PARAMS,                    offsetof(SPECIAL_PARAMS,specials_valid),                               WORD_PARAM,     N_A_BOUND,          N_A_BOUND,   SPECIAL,       N_A, N_A, N_A,            FALSE},   // specials_valid
              
{NUM_DOCCAP_FMT,                                offsetof(BYTE_PARAMS,doccap_fmt),                                      BYTE_PARAM,              0,                 4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // doccap_fmt
{NUM_DOCCAP_BPP,                                offsetof(BYTE_PARAMS,doccap_bpp),                                      BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // doccap_bpp
{NUM_DOCCAP_JPEG_QUALITY,                       offsetof(BYTE_PARAMS,doccap_jpeg_quality),                             BYTE_PARAM,              5,               100, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // doccap_jpeg_quality
{NUM_DOCCAP_USEHID,                             0x20,                                                                  BIT_2,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // doccap_usehid                                                                                                                                                 
{NUM_SIG_BRIGHTEN,                              0x18,                                                                  BIT_4,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // sig_brighten
{NUM_SIG_SHARPEN,                               0x18,                                                                  BIT_5,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // sig_sharpen
{NUM_DIAG_CLICK,                                offsetof(WORD_PARAMS,diag_click),                                      WORD_PARAM,      N_A_BOUND,         N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // diag_click
{NUM_PROCESSOR_OVERCLOCK,                       offsetof(BYTE_PARAMS, processor_overclock),                            BYTE_PARAM,             0,          N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // processor_overclock

{NUM_LARGE_BARCODE_SSTO,                        offsetof(BYTE_PARAMS,large_barcode_ssto),                              BYTE_PARAM,              0,                99, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // large_barcode_ssto
{NUM_LENGTH_OF_LARGE_BARCODE_SSTO,              offsetof(BYTE_PARAMS,length_of_large_barcode_ssto),                    BYTE_PARAM,              0,                99, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // length_of_large_barcode_ssto
{NUM_USB_AUX_PORTS,                             offsetof(BYTE_PARAMS,usb_aux_ports),                                   BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // usb_aux_ports
{NUM_COUPON_PRIORITIZATION_TIME,                offsetof(BYTE_PARAMS,coupon_prioritization_time),                      BYTE_PARAM,              0,                99, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // coupon_prioritization_time
{NUM_UPCE_SUPP,                                 offsetof(BYTE_PARAMS,upce_supp),                                       BYTE_PARAM,              0,                 2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upce_supp

#if defined(INCLUDE_STATS_DECTIME_HG_BINS_and_DECODE_DATA)
{NUM_DECTIME_HISTOGRAM_BIN_THRESHOLD,           offsetof(STRING_PARAMS,dectime_histogram_bin_threshold),               STRING_PARAM,    N_A_BOUND,         N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // dectime_histogram_bin_threshold
{NUM_STATS_BC_IMG_SAV_BTYPE_LIST,               offsetof(STRING_PARAMS, stats_bc_img_sav_btype_list),                  STRING_PARAM,            0,         N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // bc type list of images 
{NUM_STATS_BC_IMG_SAV_HG_BIN_TH,                offsetof(WORD_PARAMS,   stats_bc_img_sav_hg_bin_th),                   WORD_PARAM,              0, STATS_NUM_HG_BINS,       DEC_OWNED, N_A, N_A, N_A,            FALSE},   // HG bin threshold for decode time
{NUM_STATS_BC_IMG_GET_STATS_ID,                 offsetof(WORD_PARAMS,   stats_bc_img_get_stats_id),                    WORD_PARAM,              0, NUM_STATS_LAST_DEFINED,  DEC_OWNED, N_A, N_A, N_A,            FALSE},   // stats_id to retrieve bc image
#endif
{NUM_STORE_DECODE_IMAGES,                       offsetof(BYTE_PARAMS,store_decode_images),                             BYTE_PARAM,              0,           SDI_MAX, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // store_decode_images
{NUM_USER_DATA,                                 offsetof(PERSISTENT_USER_PARAMS,user_data),                            STRING_PARAM,    N_A_BOUND,         N_A_BOUND, PERSISTENT_USER, N_A, N_A, CHANGE_STRING,  FALSE},   // user_data
{NUM_SSTO_EXIT_REARM_TIME,                      offsetof(BYTE_PARAMS,ssto_exit_rearm_time),                            BYTE_PARAM,      N_A_BOUND,         N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ssto_exit_rearm_time
{NUM_IR_FILTER,                                 offsetof(BYTE_PARAMS,ir_filter),                                       BYTE_PARAM,              0,           IRF_MAX, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ir_filter
{NUM_ISERIALNUMBER_FORMAT,                      offsetof(PERSISTENT_USER_PARAMS,iserialnumber_format),                 BYTE_PARAM,              0,                 3, PERSISTENT_USER, N_A, N_A, N_A,            FALSE},   // iserialnumber_format

{NUM_HORIZ_EXPOSURE_MULTIPLIER,                 offsetof(BYTE_PARAMS,horiz_exposure_multiplier),                       BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // horiz_exposure_multiplier
{NUM_VERT_EXPOSURE_MULTIPLIER,                  offsetof(BYTE_PARAMS,vert_exposure_multiplier),                        BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // vert_exposure_multiplier
{NUM_RANKING_CONFIDENCE,                        offsetof(BYTE_PARAMS,ranking_confidence),                              BYTE_PARAM,              1,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ranking_confidence
{NUM_FPGA_THRESHOLD,                            offsetof(BYTE_PARAMS,fpga_threshold),                                  BYTE_PARAM,             16,                48, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // fpga_threshold
{NUM_IGNORE_SCALE_5_DIGIT_DIRECTIVE,            offsetof(BYTE_PARAMS,ignore_scale_5_digit_directive),                  BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ignore_scale_5_digit_directive
{NUM_SAME_SYMBOL_EXCLUDES_SYMBOL_TYPE,          offsetof(BYTE_PARAMS,same_symbol_excludes_symbol_type),                BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // same_symbol_excludes_symbol_type
{NUM_BUTTON_SENSITIVITY,                        offsetof(BYTE_PARAMS,button_sensitivity),                              BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // button_sensitivity
{NUM_SCALE_BEHIND_ZERO_MODE,                    offsetof(BYTE_PARAMS,scale_behind_zero_mode),                          BYTE_PARAM,              0,           SBZ_MAX, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scale_behind_zero_mode
{NUM_REJECT_SAME_WEIGHT,                        offsetof(BYTE_PARAMS,reject_same_weight),                              BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // reject_same_weight
{NUM_SCALE_IN_MOTION_DELAY_10MSEC,              offsetof(BYTE_PARAMS,scale_in_motion_delay_10msec),                    BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scale_in_motion_delay_10msec
{NUM_SCALE_RESPONSE_DELAY_10MSEC,               offsetof(BYTE_PARAMS,scale_response_delay_10msec),                     BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scale_response_delay_10msec
{NUM_UPC_PCD,                                   offsetof(BYTE_PARAMS, upc_pcd),                                        BYTE_PARAM,              0,                 2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_pcd
{NUM_EAN0_PCD,                                  offsetof(BYTE_PARAMS, ean0_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean0
{NUM_EAN1_PCD,                                  offsetof(BYTE_PARAMS, ean1_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean1
{NUM_EAN2_PCD,                                  offsetof(BYTE_PARAMS, ean2_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean2
{NUM_EAN3_PCD,                                  offsetof(BYTE_PARAMS, ean3_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean3
{NUM_EAN4_PCD,                                  offsetof(BYTE_PARAMS, ean4_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean4
{NUM_EAN5_PCD,                                  offsetof(BYTE_PARAMS, ean5_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean5
{NUM_EAN6_PCD,                                  offsetof(BYTE_PARAMS, ean6_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean6
{NUM_EAN7_PCD,                                  offsetof(BYTE_PARAMS, ean7_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean7
{NUM_EAN8_PCD,                                  offsetof(BYTE_PARAMS, ean8_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean8
{NUM_EAN9_PCD,                                  offsetof(BYTE_PARAMS, ean9_pcd),                                       BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // upc_ean9
{NUM_DECODE_UPC_WITH_VOIDS,                     offsetof(BYTE_PARAMS, decode_upc_with_voids),                          BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // decode_upc_with_voids
{NUM_DECODE_UPC_WITH_VOIDS_REDUNDANCY,          offsetof(BYTE_PARAMS, decode_upc_with_voids_redundancy),               BYTE_PARAM,              0,                 5, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // decode_upc_with_voids_redundancy
{NUM_PRODUCTCODE_FIRMWARE_INSTALL,              0x20,                                                                  BIT_3,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // productcode_firmware_install
{NUM_IBM_GS1_SEND_ASCII,                        0x21,                                                                  BIT_0,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // productcode_firmware_install
{NUM_RS232_POWER_ON_MODE,                       offsetof(BYTE_PARAMS,rs232_power_on_mode),                             BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // rs232_power_on_mode

{NUM_WEBLINK_QR,                                0x1F,                                                                  BIT_3,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // weblink_qr
{NUM_NCR_LABEL_ID_MODE,                         offsetof(BYTE_PARAMS, ncr_label_id_mode),                              BYTE_PARAM,              0,                 2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_label_id_mode
{NUM_RS232_VARIANT_LABEL_ID_MODE,               offsetof(BYTE_PARAMS, rs232_variant_label_id_mode),                    BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // rs232_variant_label_id_mode
{NUM_DIGIMARC_DENSITY,                          offsetof(BYTE_PARAMS, digimarc_density),                               BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // digimarc_density
{NUM_COLOR_CAMERA_ENABLED,                      offsetof(BYTE_PARAMS, color_camera_enabled),                           BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // color_camera_enabled
{NUM_WAKEUP_MODE,                               offsetof(BYTE_PARAMS,wakeup_mode),                                     BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // wakeup_mode
{NUM_FPGA_FILTER_TOWER,                         offsetof(BYTE_PARAMS,fpga_filter_tower),                               BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // fpga_filter_tower
{NUM_FPGA_FILTER_PLATTER,                       offsetof(BYTE_PARAMS,fpga_filter_platter),                             BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // fpga_filter_platter
{NUM_PIXMARK_EN,                                0x1D,                                                                  BIT_2,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // pixmark_en
{NUM_STORE_DECODE_IMAGES_COUNT,                 offsetof(WORD_PARAMS,store_decode_images_count),                       WORD_PARAM,              4,               100, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // store_decode_images_count
{NUM_AUX_USB_MODE,                              offsetof(BYTE_PARAMS,aux_usb_mode),                                    BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // aux_usb_mode
{NUM_SCALE_READ_WEIGHT_DELAY_50MSEC,            offsetof(BYTE_PARAMS,scale_read_weight_delay_50msec),                  BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scale_read_weight_delay_50msec
{NUM_CBAR_SECURITY_LVL,                         offsetof(BYTE_PARAMS,cbar_security_lvl),                               BYTE_PARAM,              0,                 3, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // cbar_security_lvl 
{NUM_TRANSMIT_C39_START_STOP,                   0x23,                                                                  BIT_2,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // xmit_c39_start_stop
{NUM_DOTCODE_EN,                                0x20,                                                                  BIT_7,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,             TRUE},   // dotcode_enable
{NUM_GRIDMATRIX_EN,                             0x22,                                                                  BIT_3,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,             TRUE},   // gridmatrix_enable
{NUM_DOTCODE_PRIORITIZE,                        offsetof(BYTE_PARAMS,dotcode_prioritize),                              BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // dotcode_prioritize
{NUM_TRANSMIT_EAN13_CHK_DIGIT,                  0x21,                                                                  BIT_5,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // xmit_ean13_chkdigit
{NUM_TRANSMIT_EAN8_CHK_DIGIT,                   0x21,                                                                  BIT_6,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // xmit_ean8_chkdigit
{NUM_MOD16_CBAR_CHKDGT,                         0x1F,                                                                  BIT_6,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // mod16_cbar_chkdigit
{NUM_XMIT_CBAR_CHKDGT,                          0x23,                                                                  BIT_0,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // xmit_cbar_chkdigit
{NUM_ENHANCED_DEMOTE_RSS,                       0x23,                                                                  BIT_1,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // enhanced_demote_rss
{NUM_DOTCODE_INVERSE,                           offsetof(BYTE_PARAMS,dotcode_inverse),                                 BYTE_PARAM,              0,                 2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // dotcode_inverse 
{NUM_DOTCODE_MIRROR,                            offsetof(BYTE_PARAMS,dotcode_mirror),                                  BYTE_PARAM,              0,                 2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // dotcode_mirror 
{NUM_GRIDMATRIX_INVERSE,                        offsetof(BYTE_PARAMS,gridmatrix_inverse),                              BYTE_PARAM,              0,                 2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // gridmatrix_inverse 
{NUM_GRIDMATRIX_MIRROR,                         offsetof(BYTE_PARAMS,gridmatrix_mirror),                               BYTE_PARAM,              0,                 2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // gridmatrix_mirror 
{NUM_LINKED_QR_MODE,                            offsetof(BYTE_PARAMS,linked_qr_mode),                                  BYTE_PARAM,              0,                 2, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // linked_qr_mode 
{NUM_CHECKPOINT_PULSE_LENGTH_50MSEC,            offsetof(BYTE_PARAMS,checkpoint_pulse_length_50msec),                  BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // checkpoint_pulse_length_50msec
{NUM_RS232_VARIANT_CODE_TYPE,                   offsetof(BYTE_PARAMS,rs232_variant_code_type),                         BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // rs232_variant_code_type
{NUM_RS232_VARIANT_HOST_NUM,                    offsetof(BYTE_PARAMS,rs232_variant_host_num),                          BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // rs232_variant_host_num
{NUM_SCAN_AVOIDANCE,                            offsetof(BYTE_PARAMS,scan_avoidance),                                  BYTE_PARAM,              0,            SA_MAX, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scan_avoidance
{NUM_SCAN_AVOIDANCE_THRESHOLD,                  offsetof(BYTE_PARAMS,scan_avoidance_threshold),                        BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // scan_avoidance_threshold
{NUM_COLOR_CAMERA_WEIGHT_EVENT_DELAY,           offsetof(BYTE_PARAMS,color_camera_weight_event_delay),                 BYTE_PARAM,              0,                20, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // color_camera_weight_event_delay
{NUM_DEBUG_EXTRA_LOGS,                          0x21,                                                                  BIT_1,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // debug_extra_logs
{NUM_CENTER_IR_FAULT_REBOOT,                    offsetof(BYTE_PARAMS,center_ir_fault_reboot),                          BYTE_PARAM,              0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // center_ir_fault_reboot
{NUM_HOST_CODE_ID_CONVERT,                      offsetof(STRING_PARAMS,host_code_id_convert),                          STRING_PARAM,    N_A_BOUND,         N_A_BOUND, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // code_id_convert

{NUM_NCR_ALTERNATE_WEIGHT_STATUS,               0x23,                                                                  BIT_3,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_alternate_weight_status
{NUM_DATALOGIC_FORMAT_ENABLE,                   0x23,                                                                  BIT_4,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // datalogic_format_enable. Fisk for Supermercati
{NUM_NCR_CHANGE_HOST_CODE_TYPES,                0x24,                                                                  BIT_0,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_change_host_code_types
{NUM_NCR_QR_FILTER_HTTP,                        0x24,                                                                  BIT_1,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_qr_filter_http        
{NUM_NCR_QR_FILTER_WWW,                         0x24,                                                                  BIT_2,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_qr_filter_www         
{NUM_NCR_SEND_CCC_AS_TYPE99,                    0x24,                                                                  BIT_3,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ncr_send_ccc_as_type99    
{NUM_SERIAL_SCAN_ENA_DIS_CMD,                   0x24,                                                                  BIT_6,                   0,                 1, HOST_OWNED,      N_A, N_A, N_A,            FALSE},   // serial_scan_ena_dis_cmd

{ NUM_WALMART_EAS_STATUS_ERR ,                  0x25,                                                                  BIT_0,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // walmart_eas_status_err 
{NUM_WALMART_EAS_WAS_THERE,                     0x25,                                                                  BIT_1,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // walmart_eas_was_there  
{NUM_WALMART_POLE_STATUS_ERR,                   0x25,                                                                  BIT_2,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // walmart_pole_status_err
{NUM_WALMART_POLE_WAS_THERE,                    0x25,                                                                  BIT_3,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // walmart_pole_was_there 

{NUM_COLOR_CAMERA_PING_RATE,                    offsetof(BYTE_PARAMS, color_camera_ping_rate),                         BYTE_PARAM,              0,               255, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // color_camera_ping_rate
{NUM_ILLUMINATION_WARNINGS,                     0x21,                                                                  BIT_2,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // illumination_warnings
{NUM_BEEPER_VOLUME_ALT,                         offsetof(BYTE_PARAMS,beeper_volume_alt),                               BYTE_PARAM,              0,                 4, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // beeper_volume_alt
{NUM_ENABLE_BEEPER_VOLUME_ALT,                  0x21,                                                                  BIT_4,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // enable beeper_volume_alt
{NUM_IBM_FLASHUPDATE_ENABLE,                    0x22,                                                                  BIT_4,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ibm_flashupdate_enable
{NUM_IBM_SCANNER_GENERIC_MGMT_INFO_EN,          0x20,                                                                  BIT_4,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ibm_scanner_generic_mgmt_info_en
{NUM_IBM_SCANNER_VENDOR_SPE_MGMT_INFO_EN,       0x20,                                                                  BIT_5,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ibm_scanner_vendor_spe_mgmt_info_en
{NUM_IBM_SCALE_GENERIC_MGMT_INFO,               0x20,                                                                  BIT_6,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // ibm_scale_generic_mgmt_info
{NUM_TRIG_ON_SCAN_ENABLE,                       0x22,                                                                  BIT_2,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // trig_on_scan_enable
{NUM_EXTENDED_SSTO,                             offsetof(BYTE_PARAMS,extended_ssto),                                   BYTE_PARAM,              0,                99, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // extended_ssto
{NUM_NOT_ON_FILE_BEEPS,                         offsetof(BYTE_PARAMS, not_on_file_beeps),                              BYTE_PARAM,              1,                 5, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // Number of NoF Beeps
{NUM_SYNC_BEEP_VOLUME,                          0x21,                                                                  BIT_7,                   0,                 1, DEC_OWNED,       N_A, N_A, N_A,            FALSE},   // Sync Bootup beep to system volume
// ATAG END

// Include Statistics
#define STATS_PAR_INFO // include only 'PAR_INFO' stuff
#include "stats_api.i" // Include entire set of STATISTIC
#undef STATS_PAR_INFO

